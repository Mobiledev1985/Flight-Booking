//
// BookingsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class BookingsAPI {
    /**
     Add passenger
     
     - parameter iBookingId: (form) Booking Id 
     - parameter vPassengerName: (form) Passenger Name 
     - parameter vPassengerId: (form) Upload Id Proof 
     - parameter dPassengerDob: (form) Passenger Date Of Birth 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addPassengerPost(iBookingId: Int, vPassengerName: String, vPassengerId: String, dPassengerDob: String, completion: @escaping ((_ data: AddPassengerResponse?,_ error: Error?) -> Void)) {
        addPassengerPostWithRequestBuilder(iBookingId: iBookingId, vPassengerName: vPassengerName, vPassengerId: vPassengerId, dPassengerDob: dPassengerDob).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add passenger
     - POST /add_passenger
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Passenger information",
  "data" : {
    "iPassengerId" : 2,
    "iBookingId" : 1,
    "vPassengerName" : "test1",
    "vPassengerId" : "/tmp/phpf8Q9Kq",
    "dPassengerDob" : "1992-02-02"
  }
}}]
     
     - parameter iBookingId: (form) Booking Id 
     - parameter vPassengerName: (form) Passenger Name 
     - parameter vPassengerId: (form) Upload Id Proof 
     - parameter dPassengerDob: (form) Passenger Date Of Birth 

     - returns: RequestBuilder<AddPassengerResponse> 
     */
    open class func addPassengerPostWithRequestBuilder(iBookingId: Int, vPassengerName: String, vPassengerId: String, dPassengerDob: String) -> RequestBuilder<AddPassengerResponse> {
        let path = "/add_passenger"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iBookingId": iBookingId.encodeToJSON(),
            "vPassengerName": vPassengerName,
            "vPassengerId": vPassengerId,
            "dPassengerDob": dPassengerDob
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AddPassengerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Aircraft Detail Added Legs
     
     - parameter iDepartAircraftId: (form) Depart Aircraft Id 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter lAddedLegs: (form) Added Legs json array 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aircraftDetailAddedLegsPost(iDepartAircraftId: Int, iDepartureId: Int, iDestinationId: Int, lAddedLegs: String, iDepartureDate: Int, iDepartureTime: Int, completion: @escaping ((_ data: AircraftDetailAddedLegResponse?,_ error: Error?) -> Void)) {
        aircraftDetailAddedLegsPostWithRequestBuilder(iDepartAircraftId: iDepartAircraftId, iDepartureId: iDepartureId, iDestinationId: iDestinationId, lAddedLegs: lAddedLegs, iDepartureDate: iDepartureDate, iDepartureTime: iDepartureTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Aircraft Detail Added Legs
     - POST /aircraft_detail_added_legs
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Aircrafts information",
  "data" : {
    "iDepartureDate" : "1583020800",
    "iDepartureTime" : "1582628400",
    "departureDetail" : {
      "iDepartureId" : 1,
      "vId" : "KAIK",
      "vAirportName" : "Aiken Regional Airport",
      "vZipcode" : "29805",
      "vCity" : "Aiken"
    },
    "destinationDetail" : {
      "iDestinationId" : 2,
      "vId" : "KAQX",
      "vAirportName" : "Allendale County Airport",
      "vZipcode" : "29827",
      "vCity" : "Allendale"
    },
    "aircraft" : {
      "iAircraftId" : 1,
      "vAircraftName" : "328 jet",
      "vCompanyName" : "ULTIMATE JETCHARTERS, LLC.",
      "vAircraftType" : "Jet Airliner",
      "iNumberOfSeats" : 9,
      "iSpeed" : 100,
      "vSpeedUnit" : "mph",
      "vCruiseSpeed" : "878-987",
      "vCruiseSpeedUnit" : "kts",
      "iAircraftLenght" : 22,
      "iCabinWidth" : 5,
      "vLavotary" : "Partial",
      "iRange" : 1280,
      "vRangeUnit" : "nmi/h",
      "iMainRunway" : 2500,
      "vMainRunwayUnit" : "ft",
      "dcPriceForFlight" : "10000.00",
      "dcPricePerSeat" : "800.00"
    }
  }
}}]
     
     - parameter iDepartAircraftId: (form) Depart Aircraft Id 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter lAddedLegs: (form) Added Legs json array 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 

     - returns: RequestBuilder<AircraftDetailAddedLegResponse> 
     */
    open class func aircraftDetailAddedLegsPostWithRequestBuilder(iDepartAircraftId: Int, iDepartureId: Int, iDestinationId: Int, lAddedLegs: String, iDepartureDate: Int, iDepartureTime: Int) -> RequestBuilder<AircraftDetailAddedLegResponse> {
        let path = "/aircraft_detail_added_legs"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iDepartAircraftId": iDepartAircraftId.encodeToJSON(),
            "iDepartureId": iDepartureId.encodeToJSON(),
            "iDestinationId": iDestinationId.encodeToJSON(),
            "lAddedLegs": lAddedLegs,
            "iDepartureDate": iDepartureDate.encodeToJSON(),
            "iDepartureTime": iDepartureTime.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AircraftDetailAddedLegResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter iTripType
     */
    public enum ITripType_aircraftDetailPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     * enum for parameter iTripBookingType
     */
    public enum ITripBookingType_aircraftDetailPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     Aircraft Detail
     
     - parameter iTripType: (form) Trip Type ( 0-One way ,1-Round ) 
     - parameter iTripBookingType: (form) Trip Booking Type ( 0-privet booking,1-shared booking ) 
     - parameter iDepartAircraftId: (form) Depart Aircraft Id 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter iBookingParentId: (form) Booking Parent Id (optional)
     - parameter iReturnAircraftId: (form) Return Aircraft Id (optional)
     - parameter iReturnDate: (form) Return Date (optional)
     - parameter iReturnTime: (form) Return time (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aircraftDetailPost(iTripType: ITripType_aircraftDetailPost, iTripBookingType: ITripBookingType_aircraftDetailPost, iDepartAircraftId: Int, iDepartureId: Int, iDestinationId: Int, iDepartureDate: Int, iDepartureTime: Int, iBookingParentId: Int? = nil, iReturnAircraftId: Int? = nil, iReturnDate: Int? = nil, iReturnTime: Int? = nil, completion: @escaping ((_ data: AircraftDetailResponse?,_ error: Error?) -> Void)) {
        aircraftDetailPostWithRequestBuilder(iTripType: iTripType, iTripBookingType: iTripBookingType, iDepartAircraftId: iDepartAircraftId, iDepartureId: iDepartureId, iDestinationId: iDestinationId, iDepartureDate: iDepartureDate, iDepartureTime: iDepartureTime, iBookingParentId: iBookingParentId, iReturnAircraftId: iReturnAircraftId, iReturnDate: iReturnDate, iReturnTime: iReturnTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Aircraft Detail
     - POST /aircraft_detail
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Aircrafts information",
  "data" : {
    "iDepartureDate" : "1583020800",
    "iDepartureTime" : "1582628400",
    "departureDetail" : {
      "iDepartureId" : 1,
      "vId" : "KAIK",
      "vAirportName" : "Aiken Regional Airport",
      "vZipcode" : "29805",
      "vCity" : "Aiken"
    },
    "destinationDetail" : {
      "iDestinationId" : 2,
      "vId" : "KAQX",
      "vAirportName" : "Allendale County Airport",
      "vZipcode" : "29827",
      "vCity" : "Allendale"
    },
    "departAircraft" : {
      "iAircraftId" : 1,
      "vAircraftName" : "328 jet",
      "vCompanyName" : "ULTIMATE JETCHARTERS, LLC.",
      "vAircraftType" : "Jet Airliner",
      "iNumberOfSeats" : 9,
      "iSpeed" : 100,
      "vSpeedUnit" : "mph",
      "vCruiseSpeed" : "878-987",
      "vCruiseSpeedUnit" : "kts",
      "iAircraftLenght" : 22,
      "iCabinWidth" : 5,
      "vLavotary" : "Partial",
      "iRange" : 1280,
      "vRangeUnit" : "nmi/h",
      "iMainRunway" : 2500,
      "vMainRunwayUnit" : "ft",
      "dcPriceForFlight" : 10000,
      "dcPricePerSeat" : 800
    }
  }
}}]
     
     - parameter iTripType: (form) Trip Type ( 0-One way ,1-Round ) 
     - parameter iTripBookingType: (form) Trip Booking Type ( 0-privet booking,1-shared booking ) 
     - parameter iDepartAircraftId: (form) Depart Aircraft Id 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter iBookingParentId: (form) Booking Parent Id (optional)
     - parameter iReturnAircraftId: (form) Return Aircraft Id (optional)
     - parameter iReturnDate: (form) Return Date (optional)
     - parameter iReturnTime: (form) Return time (optional)

     - returns: RequestBuilder<AircraftDetailResponse> 
     */
    open class func aircraftDetailPostWithRequestBuilder(iTripType: ITripType_aircraftDetailPost, iTripBookingType: ITripBookingType_aircraftDetailPost, iDepartAircraftId: Int, iDepartureId: Int, iDestinationId: Int, iDepartureDate: Int, iDepartureTime: Int, iBookingParentId: Int? = nil, iReturnAircraftId: Int? = nil, iReturnDate: Int? = nil, iReturnTime: Int? = nil) -> RequestBuilder<AircraftDetailResponse> {
        let path = "/aircraft_detail"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iTripType": iTripType.rawValue,
            "iTripBookingType": iTripBookingType.rawValue,
            "iBookingParentId": iBookingParentId?.encodeToJSON(),
            "iDepartAircraftId": iDepartAircraftId.encodeToJSON(),
            "iReturnAircraftId": iReturnAircraftId?.encodeToJSON(),
            "iDepartureId": iDepartureId.encodeToJSON(),
            "iDestinationId": iDestinationId.encodeToJSON(),
            "iDepartureDate": iDepartureDate.encodeToJSON(),
            "iDepartureTime": iDepartureTime.encodeToJSON(),
            "iReturnDate": iReturnDate?.encodeToJSON(),
            "iReturnTime": iReturnTime?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AircraftDetailResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     get Aircraft Types List
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func aircraftTypesListGet(completion: @escaping ((_ data: AircraftTypesListResponse?,_ error: Error?) -> Void)) {
        aircraftTypesListGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     get Aircraft Types List
     - GET /aircraft_types_list
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Aircraft types information",
  "data" : [ {
    "iAircraftTypeId" : 1,
    "vAircraftType" : "Type1"
  }, {
    "iAircraftTypeId" : 2,
    "vAircraftType" : "Type2"
  } ]
}}]

     - returns: RequestBuilder<AircraftTypesListResponse> 
     */
    open class func aircraftTypesListGetWithRequestBuilder() -> RequestBuilder<AircraftTypesListResponse> {
        let path = "/aircraft_types_list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AircraftTypesListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Airport lists
     
     - parameter vZipcode: (form) Zipcode (optional, default to 29805)
     - parameter vCity: (form) City (optional, default to Aiken)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func airportListsPost(vZipcode: String? = nil, vCity: String? = nil, completion: @escaping ((_ data: AirportListResponse?,_ error: Error?) -> Void)) {
        airportListsPostWithRequestBuilder(vZipcode: vZipcode, vCity: vCity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Airport lists
     - POST /airport_lists
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Airport information",
  "data" : [ {
    "iAirportId" : 1,
    "vId" : "KAIK",
    "vAirportName" : "Aiken Regional Airport",
    "vZipcode" : "29805",
    "vCity" : "Aiken"
  } ]
}}]
     
     - parameter vZipcode: (form) Zipcode (optional, default to 29805)
     - parameter vCity: (form) City (optional, default to Aiken)

     - returns: RequestBuilder<AirportListResponse> 
     */
    open class func airportListsPostWithRequestBuilder(vZipcode: String? = nil, vCity: String? = nil) -> RequestBuilder<AirportListResponse> {
        let path = "/airport_lists"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "vZipcode": vZipcode,
            "vCity": vCity
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<AirportListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Booking Continue added legs
     
     - parameter iDepartAircraftId: (form) Depart Aircraft Id 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter lAddedLegs: (form) Added Legs json array 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter dcTotalPrice: (form) Total Price 
     - parameter iNumberOfSeats: (form) Number of Seats 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bookingContinueAddedLegsPost(iDepartAircraftId: Int, iDepartureId: Int, iDestinationId: Int, lAddedLegs: String, iDepartureDate: Int, iDepartureTime: Int, dcTotalPrice: Double, iNumberOfSeats: Int, vDeviceUniqueId: String, completion: @escaping ((_ data: BookingContinueAddedLegsResponse?,_ error: Error?) -> Void)) {
        bookingContinueAddedLegsPostWithRequestBuilder(iDepartAircraftId: iDepartAircraftId, iDepartureId: iDepartureId, iDestinationId: iDestinationId, lAddedLegs: lAddedLegs, iDepartureDate: iDepartureDate, iDepartureTime: iDepartureTime, dcTotalPrice: dcTotalPrice, iNumberOfSeats: iNumberOfSeats, vDeviceUniqueId: vDeviceUniqueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Booking Continue added legs
     - POST /booking_continue_added_legs
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Booking information",
  "data" : {
    "iBookingId" : 7
  }
}}]
     
     - parameter iDepartAircraftId: (form) Depart Aircraft Id 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter lAddedLegs: (form) Added Legs json array 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter dcTotalPrice: (form) Total Price 
     - parameter iNumberOfSeats: (form) Number of Seats 
     - parameter vDeviceUniqueId: (form) Device Unique Id 

     - returns: RequestBuilder<BookingContinueAddedLegsResponse> 
     */
    open class func bookingContinueAddedLegsPostWithRequestBuilder(iDepartAircraftId: Int, iDepartureId: Int, iDestinationId: Int, lAddedLegs: String, iDepartureDate: Int, iDepartureTime: Int, dcTotalPrice: Double, iNumberOfSeats: Int, vDeviceUniqueId: String) -> RequestBuilder<BookingContinueAddedLegsResponse> {
        let path = "/booking_continue_added_legs"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iDepartAircraftId": iDepartAircraftId.encodeToJSON(),
            "iDepartureId": iDepartureId.encodeToJSON(),
            "iDestinationId": iDestinationId.encodeToJSON(),
            "lAddedLegs": lAddedLegs,
            "iDepartureDate": iDepartureDate.encodeToJSON(),
            "iDepartureTime": iDepartureTime.encodeToJSON(),
            "dcTotalPrice": dcTotalPrice,
            "iNumberOfSeats": iNumberOfSeats.encodeToJSON(),
            "vDeviceUniqueId": vDeviceUniqueId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BookingContinueAddedLegsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter iTripType
     */
    public enum ITripType_bookingContinuePost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     * enum for parameter iTripBookingType
     */
    public enum ITripBookingType_bookingContinuePost: String { 
        case _0 = "0"
        case _1 = "1"
        case _2 = "2"
    }

    /**
     * enum for parameter tiIsCatering
     */
    public enum TiIsCatering_bookingContinuePost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     * enum for parameter tiIsCateringReservation
     */
    public enum TiIsCateringReservation_bookingContinuePost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     Booking Continue
     
     - parameter iTripType: (form) Trip Type ( 0-One way ,1-Round ) 
     - parameter iDepartAircraftId: (form) Depart Aircraft Id 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter iTripBookingType: (form) Trip Booking Type ( 0-privet,1-shared,2-privet_shared) 
     - parameter dcTotalPrice: (form) Total Price 
     - parameter iNumberOfSeats: (form) Number of Seats 
     - parameter tiIsCatering: (form) Is Catering Involved ( 0-No, 1-Yes ) 
     - parameter tiIsCateringReservation: (form) Is Catering Reserved ( 0-No, 1-Yes ) 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter iReturnAircraftId: (form) Return Aircraft Id (optional)
     - parameter iReturnDate: (form) Return Date (optional)
     - parameter iReturnTime: (form) Return time (optional)
     - parameter iBookingParentId: (form) Booking Parent Id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bookingContinuePost(iTripType: ITripType_bookingContinuePost, iDepartAircraftId: Int, iDepartureId: Int, iDestinationId: Int, iDepartureDate: Int, iDepartureTime: Int, iTripBookingType: ITripBookingType_bookingContinuePost, dcTotalPrice: Double, iNumberOfSeats: Int, tiIsCatering: TiIsCatering_bookingContinuePost, tiIsCateringReservation: TiIsCateringReservation_bookingContinuePost, vDeviceUniqueId: String, iReturnAircraftId: Int? = nil, iReturnDate: Int? = nil, iReturnTime: Int? = nil, iBookingParentId: Int? = nil, completion: @escaping ((_ data: BookingContinueResponse?,_ error: Error?) -> Void)) {
        bookingContinuePostWithRequestBuilder(iTripType: iTripType, iDepartAircraftId: iDepartAircraftId, iDepartureId: iDepartureId, iDestinationId: iDestinationId, iDepartureDate: iDepartureDate, iDepartureTime: iDepartureTime, iTripBookingType: iTripBookingType, dcTotalPrice: dcTotalPrice, iNumberOfSeats: iNumberOfSeats, tiIsCatering: tiIsCatering, tiIsCateringReservation: tiIsCateringReservation, vDeviceUniqueId: vDeviceUniqueId, iReturnAircraftId: iReturnAircraftId, iReturnDate: iReturnDate, iReturnTime: iReturnTime, iBookingParentId: iBookingParentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Booking Continue
     - POST /booking_continue
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Booking information",
  "data" : {
    "iBookingId" : 7
  }
}}]
     
     - parameter iTripType: (form) Trip Type ( 0-One way ,1-Round ) 
     - parameter iDepartAircraftId: (form) Depart Aircraft Id 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter iTripBookingType: (form) Trip Booking Type ( 0-privet,1-shared,2-privet_shared) 
     - parameter dcTotalPrice: (form) Total Price 
     - parameter iNumberOfSeats: (form) Number of Seats 
     - parameter tiIsCatering: (form) Is Catering Involved ( 0-No, 1-Yes ) 
     - parameter tiIsCateringReservation: (form) Is Catering Reserved ( 0-No, 1-Yes ) 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter iReturnAircraftId: (form) Return Aircraft Id (optional)
     - parameter iReturnDate: (form) Return Date (optional)
     - parameter iReturnTime: (form) Return time (optional)
     - parameter iBookingParentId: (form) Booking Parent Id (optional)

     - returns: RequestBuilder<BookingContinueResponse> 
     */
    open class func bookingContinuePostWithRequestBuilder(iTripType: ITripType_bookingContinuePost, iDepartAircraftId: Int, iDepartureId: Int, iDestinationId: Int, iDepartureDate: Int, iDepartureTime: Int, iTripBookingType: ITripBookingType_bookingContinuePost, dcTotalPrice: Double, iNumberOfSeats: Int, tiIsCatering: TiIsCatering_bookingContinuePost, tiIsCateringReservation: TiIsCateringReservation_bookingContinuePost, vDeviceUniqueId: String, iReturnAircraftId: Int? = nil, iReturnDate: Int? = nil, iReturnTime: Int? = nil, iBookingParentId: Int? = nil) -> RequestBuilder<BookingContinueResponse> {
        let path = "/booking_continue"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iTripType": iTripType.rawValue,
            "iDepartAircraftId": iDepartAircraftId.encodeToJSON(),
            "iReturnAircraftId": iReturnAircraftId?.encodeToJSON(),
            "iDepartureId": iDepartureId.encodeToJSON(),
            "iDestinationId": iDestinationId.encodeToJSON(),
            "iDepartureDate": iDepartureDate.encodeToJSON(),
            "iDepartureTime": iDepartureTime.encodeToJSON(),
            "iReturnDate": iReturnDate?.encodeToJSON(),
            "iReturnTime": iReturnTime?.encodeToJSON(),
            "iTripBookingType": iTripBookingType.rawValue,
            "iBookingParentId": iBookingParentId?.encodeToJSON(),
            "dcTotalPrice": dcTotalPrice,
            "iNumberOfSeats": iNumberOfSeats.encodeToJSON(),
            "tiIsCatering": tiIsCatering.rawValue,
            "tiIsCateringReservation": tiIsCateringReservation.rawValue,
            "vDeviceUniqueId": vDeviceUniqueId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BookingContinueResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete Passenger
     
     - parameter iPassengerId: (path) Passenger Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deletePassengerIPassengerIdDelete(iPassengerId: Int, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        deletePassengerIPassengerIdDeleteWithRequestBuilder(iPassengerId: iPassengerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete Passenger
     - DELETE /delete-passenger/{iPassengerId}
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Passenger Information is successfully deleted."
}}]
     
     - parameter iPassengerId: (path) Passenger Id 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func deletePassengerIPassengerIdDeleteWithRequestBuilder(iPassengerId: Int) -> RequestBuilder<SuccessResponse> {
        var path = "/delete-passenger/{iPassengerId}"
        let iPassengerIdPreEscape = "\(iPassengerId)"
        let iPassengerIdPostEscape = iPassengerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{iPassengerId}", with: iPassengerIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     passengers info
     
     - parameter iBookingId: (form) Booking Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func passengerInfoPost(iBookingId: Int, completion: @escaping ((_ data: PassengerInfoResponse?,_ error: Error?) -> Void)) {
        passengerInfoPostWithRequestBuilder(iBookingId: iBookingId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     passengers info
     - POST /passenger_info
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Passenger information",
  "data" : [ {
    "iPassengerId" : 2,
    "iBookingId" : 1,
    "vPassengerName" : "test1",
    "vPassengerId" : "/tmp/phpf8Q9Kq",
    "dPassengerDob" : "1992-02-02"
  } ]
}}]
     
     - parameter iBookingId: (form) Booking Id 

     - returns: RequestBuilder<PassengerInfoResponse> 
     */
    open class func passengerInfoPostWithRequestBuilder(iBookingId: Int) -> RequestBuilder<PassengerInfoResponse> {
        let path = "/passenger_info"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iBookingId": iBookingId.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PassengerInfoResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Save destination location
     
     - parameter iAirportId: (form) iAirportId 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveDestinationPost(iAirportId: Int, vDeviceUniqueId: String, completion: @escaping ((_ data: SaveDestinationResponse?,_ error: Error?) -> Void)) {
        saveDestinationPostWithRequestBuilder(iAirportId: iAirportId, vDeviceUniqueId: vDeviceUniqueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Save destination location
     - POST /save_destination
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Destination information",
  "data" : {
    "iTempDestinationId" : 2,
    "vDeviceUniqueId" : "asdsadasd",
    "iAirportId" : 1,
    "vAirportName" : "Aiken Regional Airport",
    "vZipcode" : "29805",
    "vCity" : "Aiken"
  }
}}]
     
     - parameter iAirportId: (form) iAirportId 
     - parameter vDeviceUniqueId: (form) Device Unique Id 

     - returns: RequestBuilder<SaveDestinationResponse> 
     */
    open class func saveDestinationPostWithRequestBuilder(iAirportId: Int, vDeviceUniqueId: String) -> RequestBuilder<SaveDestinationResponse> {
        let path = "/save_destination"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iAirportId": iAirportId.encodeToJSON(),
            "vDeviceUniqueId": vDeviceUniqueId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SaveDestinationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Save pickup location
     
     - parameter iAirportId: (form) iAirportId 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func savePickupPost(iAirportId: Int, vDeviceUniqueId: String, completion: @escaping ((_ data: SavePickupResponse?,_ error: Error?) -> Void)) {
        savePickupPostWithRequestBuilder(iAirportId: iAirportId, vDeviceUniqueId: vDeviceUniqueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Save pickup location
     - POST /save_pickup
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Pickup information",
  "data" : {
    "iTempPickupId" : 2,
    "vDeviceUniqueId" : "asdsadasd",
    "iAirportId" : 1,
    "vAirportName" : "Aiken Regional Airport",
    "vZipcode" : "29805",
    "vCity" : "Aiken"
  }
}}]
     
     - parameter iAirportId: (form) iAirportId 
     - parameter vDeviceUniqueId: (form) Device Unique Id 

     - returns: RequestBuilder<SavePickupResponse> 
     */
    open class func savePickupPostWithRequestBuilder(iAirportId: Int, vDeviceUniqueId: String) -> RequestBuilder<SavePickupResponse> {
        let path = "/save_pickup"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iAirportId": iAirportId.encodeToJSON(),
            "vDeviceUniqueId": vDeviceUniqueId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SavePickupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search Added Leg Aircraft
     
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter lAddedLegs: (form) Added Legs json array 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter iAircraftTypeId: (form) Aircfat Type 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchAddedLegAircraftPost(iDepartureId: Int, iDestinationId: Int, lAddedLegs: String, iDepartureDate: Int, iDepartureTime: Int, iAircraftTypeId: Int, vDeviceUniqueId: String, completion: @escaping ((_ data: SearchAddedLegAircraftResponse?,_ error: Error?) -> Void)) {
        searchAddedLegAircraftPostWithRequestBuilder(iDepartureId: iDepartureId, iDestinationId: iDestinationId, lAddedLegs: lAddedLegs, iDepartureDate: iDepartureDate, iDepartureTime: iDepartureTime, iAircraftTypeId: iAircraftTypeId, vDeviceUniqueId: vDeviceUniqueId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search Added Leg Aircraft
     - POST /search_added_leg_aircraft
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Aircrafts information",
  "data" : {
    "iTripType" : 0,
    "iTripBookingType" : 0,
    "iDepartureDate" : "1583020800",
    "iDepartureTime" : "1582628400",
    "departureDetail" : {
      "iDepartureId" : 1,
      "vId" : "KAIK",
      "vAirportName" : "Aiken Regional Airport",
      "vZipcode" : "29805",
      "vCity" : "Aiken"
    },
    "destinationDetail" : {
      "iDestinationId" : 4,
      "vId" : "KPHH",
      "vAirportName" : "Robert F Swinnie Airport",
      "vZipcode" : "29510",
      "vCity" : "Andrews"
    },
    "addedLegs" : {
      "leg1" : {
        "iDepartureId" : 1,
        "iDestinationId" : 2
      },
      "leg2" : {
        "iDepartureId" : 2,
        "iDestinationId" : 3
      },
      "leg3" : {
        "iDepartureId" : 3,
        "iDestinationId" : 4
      }
    },
    "departAircrafts" : [ {
      "iDepartAircraftId" : 2,
      "vAircraftName" : "Regional jet",
      "vCompanyName" : "RVR AVIATION, LLC",
      "vAircraftType" : "Super Mid Jet\\t",
      "iNumberOfSeats" : 6,
      "iSpeed" : 120,
      "vSpeedUnit" : "mph",
      "dcPriceForFlight" : "1000.00",
      "dcPricePerSeat" : "40.00"
    } ]
  }
}}]
     
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter lAddedLegs: (form) Added Legs json array 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter iAircraftTypeId: (form) Aircfat Type 
     - parameter vDeviceUniqueId: (form) Device Unique Id 

     - returns: RequestBuilder<SearchAddedLegAircraftResponse> 
     */
    open class func searchAddedLegAircraftPostWithRequestBuilder(iDepartureId: Int, iDestinationId: Int, lAddedLegs: String, iDepartureDate: Int, iDepartureTime: Int, iAircraftTypeId: Int, vDeviceUniqueId: String) -> RequestBuilder<SearchAddedLegAircraftResponse> {
        let path = "/search_added_leg_aircraft"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iDepartureId": iDepartureId.encodeToJSON(),
            "iDestinationId": iDestinationId.encodeToJSON(),
            "lAddedLegs": lAddedLegs,
            "iDepartureDate": iDepartureDate.encodeToJSON(),
            "iDepartureTime": iDepartureTime.encodeToJSON(),
            "iAircraftTypeId": iAircraftTypeId.encodeToJSON(),
            "vDeviceUniqueId": vDeviceUniqueId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SearchAddedLegAircraftResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter iTripType
     */
    public enum ITripType_searchAircraftPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     * enum for parameter iTripBookingType
     */
    public enum ITripBookingType_searchAircraftPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     Search Aircraft
     
     - parameter iTripType: (form) Trip Type ( 0-One way ,1-Round ) 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter iAircraftTypeId: (form) Aircfat Type 
     - parameter iTripBookingType: (form) Trip Booking Type ( 0-privet booking,1-shared booking ) 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter iReturnDate: (form) Return Date (optional)
     - parameter iReturnTime: (form) Return time (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchAircraftPost(iTripType: ITripType_searchAircraftPost, iDepartureId: Int, iDestinationId: Int, iDepartureDate: Int, iDepartureTime: Int, iAircraftTypeId: Int, iTripBookingType: ITripBookingType_searchAircraftPost, vDeviceUniqueId: String, iReturnDate: Int? = nil, iReturnTime: Int? = nil, completion: @escaping ((_ data: SearchAircraftResponse?,_ error: Error?) -> Void)) {
        searchAircraftPostWithRequestBuilder(iTripType: iTripType, iDepartureId: iDepartureId, iDestinationId: iDestinationId, iDepartureDate: iDepartureDate, iDepartureTime: iDepartureTime, iAircraftTypeId: iAircraftTypeId, iTripBookingType: iTripBookingType, vDeviceUniqueId: vDeviceUniqueId, iReturnDate: iReturnDate, iReturnTime: iReturnTime).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search Aircraft
     - POST /search_aircraft
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Aircrafts information",
  "data" : {
    "iDepartureDate" : 1583020800,
    "iDepartureTime" : 1582628400,
    "departureDetail" : {
      "vId" : "KAIK",
      "vAirportName" : "Aiken Regional Airport",
      "vZipcode" : "29805",
      "vCity" : "Aiken"
    },
    "destinationDetail" : {
      "vId" : "KAQX",
      "vAirportName" : "Allendale County Airport",
      "vZipcode" : "29827",
      "vCity" : "Allendale"
    },
    "departAircrafts" : [ {
      "iAircraftId" : 1,
      "vAircraftName" : "328 jet",
      "vCompanyName" : "ULTIMATE JETCHARTERS, LLC.",
      "vAircraftType" : "Jet Airliner",
      "iNumberOfSeats" : 9,
      "iCruiseSpeed" : 100,
      "vCruiseSpeedUnit" : "mph",
      "dcPriceForFlight" : "10000.00",
      "dcPricePerSeat" : "800.00",
      "tiIsCatering" : "Yes",
      "iAircraftImageId" : "1",
      "vAircraftImageName" : "image.jpeg",
      "vAircraftImageThumb" : "thumb.jpeg"
    }, {
      "iAircraftId" : 2,
      "vAircraftName" : "Regional jet",
      "vCompanyName" : "RVR AVIATION, LLC",
      "vAircraftType" : "Jet Airliner",
      "iNumberOfSeats" : 5,
      "iCruiseSpeed" : 120,
      "vCruiseSpeedUnit" : "mph",
      "dcPriceForFlight" : "1000.00",
      "dcPricePerSeat" : "40.00",
      "tiIsCatering" : "No",
      "iAircraftImageId" : "2",
      "vAircraftImageName" : "image2.jpeg",
      "vAircraftImageThumb" : "thumb2.jpeg"
    } ]
  }
}}]
     
     - parameter iTripType: (form) Trip Type ( 0-One way ,1-Round ) 
     - parameter iDepartureId: (form) Departure Airport Id 
     - parameter iDestinationId: (form) Destination Airport Id 
     - parameter iDepartureDate: (form) Departure Date 
     - parameter iDepartureTime: (form) Departure time 
     - parameter iAircraftTypeId: (form) Aircfat Type 
     - parameter iTripBookingType: (form) Trip Booking Type ( 0-privet booking,1-shared booking ) 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter iReturnDate: (form) Return Date (optional)
     - parameter iReturnTime: (form) Return time (optional)

     - returns: RequestBuilder<SearchAircraftResponse> 
     */
    open class func searchAircraftPostWithRequestBuilder(iTripType: ITripType_searchAircraftPost, iDepartureId: Int, iDestinationId: Int, iDepartureDate: Int, iDepartureTime: Int, iAircraftTypeId: Int, iTripBookingType: ITripBookingType_searchAircraftPost, vDeviceUniqueId: String, iReturnDate: Int? = nil, iReturnTime: Int? = nil) -> RequestBuilder<SearchAircraftResponse> {
        let path = "/search_aircraft"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iTripType": iTripType.rawValue,
            "iDepartureId": iDepartureId.encodeToJSON(),
            "iDestinationId": iDestinationId.encodeToJSON(),
            "iDepartureDate": iDepartureDate.encodeToJSON(),
            "iDepartureTime": iDepartureTime.encodeToJSON(),
            "iReturnDate": iReturnDate?.encodeToJSON(),
            "iReturnTime": iReturnTime?.encodeToJSON(),
            "iAircraftTypeId": iAircraftTypeId.encodeToJSON(),
            "iTripBookingType": iTripBookingType.rawValue,
            "vDeviceUniqueId": vDeviceUniqueId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SearchAircraftResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update passenger
     
     - parameter iPassengerId: (form) Passenger Id 
     - parameter vPassengerName: (form) Passenger Name 
     - parameter vPassengerId: (form) Upload Id Proof 
     - parameter dPassengerDob: (form) Passenger Date Of Birth 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePassengerPost(iPassengerId: Int, vPassengerName: String, vPassengerId: String, dPassengerDob: String, completion: @escaping ((_ data: UpdatePassengerResponse?,_ error: Error?) -> Void)) {
        updatePassengerPostWithRequestBuilder(iPassengerId: iPassengerId, vPassengerName: vPassengerName, vPassengerId: vPassengerId, dPassengerDob: dPassengerDob).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update passenger
     - POST /update_passenger
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Passenger information",
  "data" : {
    "iPassengerId" : 2,
    "iBookingId" : 1,
    "vPassengerName" : "test1",
    "vPassengerId" : "/tmp/phpf8Q9Kq",
    "dPassengerDob" : "1992-02-02"
  }
}}]
     
     - parameter iPassengerId: (form) Passenger Id 
     - parameter vPassengerName: (form) Passenger Name 
     - parameter vPassengerId: (form) Upload Id Proof 
     - parameter dPassengerDob: (form) Passenger Date Of Birth 

     - returns: RequestBuilder<UpdatePassengerResponse> 
     */
    open class func updatePassengerPostWithRequestBuilder(iPassengerId: Int, vPassengerName: String, vPassengerId: String, dPassengerDob: String) -> RequestBuilder<UpdatePassengerResponse> {
        let path = "/update_passenger"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iPassengerId": iPassengerId.encodeToJSON(),
            "vPassengerName": vPassengerName,
            "vPassengerId": vPassengerId,
            "dPassengerDob": dPassengerDob
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UpdatePassengerResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
