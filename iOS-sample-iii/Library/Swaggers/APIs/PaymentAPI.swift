//
// PaymentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PaymentAPI {
    /**
     Guest payment
     
     - parameter iBookingId: (form) Booking Id 
     - parameter vUserName: (form) Full Name 
     - parameter vPhone: (form) Phone 
     - parameter vEmail: (form) Email address 
     - parameter vIdProof: (form) Upload Id Proof 
     - parameter vCustomerId: (form) Customer Id 
     - parameter vCardToken: (form) Card Token 
     - parameter dcAmount: (form) Amount 
     - parameter iDealId: (form) Deal Id (optional, default to )
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guestPaymentPost(iBookingId: String, vUserName: String, vPhone: String, vEmail: String, vIdProof: URL, vCustomerId: String, vCardToken: String, dcAmount: String, iDealId: String? = nil, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        guestPaymentPostWithRequestBuilder(iBookingId: iBookingId, vUserName: vUserName, vPhone: vPhone, vEmail: vEmail, vIdProof: vIdProof, vCustomerId: vCustomerId, vCardToken: vCardToken, dcAmount: dcAmount, iDealId: iDealId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Guest payment
     - POST /guest_payment
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Payment success."
}}]
     
     - parameter iBookingId: (form) Booking Id 
     - parameter vUserName: (form) Full Name 
     - parameter vPhone: (form) Phone 
     - parameter vEmail: (form) Email address 
     - parameter vIdProof: (form) Upload Id Proof 
     - parameter vCustomerId: (form) Customer Id 
     - parameter vCardToken: (form) Card Token 
     - parameter dcAmount: (form) Amount 
     - parameter iDealId: (form) Deal Id (optional, default to )

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func guestPaymentPostWithRequestBuilder(iBookingId: String, vUserName: String, vPhone: String, vEmail: String, vIdProof: URL, vCustomerId: String, vCardToken: String, dcAmount: String, iDealId: String? = nil) -> RequestBuilder<SuccessResponse> {
        let path = "/guest_payment"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iBookingId": iBookingId,
            "iDealId": iDealId,
            "vUserName": vUserName,
            "vPhone": vPhone,
            "vEmail": vEmail,
            "vIdProof": vIdProof,
            "vCustomerId": vCustomerId,
            "vCardToken": vCardToken,
            "dcAmount": dcAmount
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Make payment
     
     - parameter iUserId: (form) User Id 
     - parameter iBookingId: (form) Booking Id 
     - parameter iUserCardDetailId: (form) User Card Detail Id 
     - parameter vCustomerId: (form) Customer Id 
     - parameter vCardToken: (form) Card Token 
     - parameter dcAmount: (form) Amount 
     - parameter accessToken: (header)  
     - parameter iDealId: (form) Deal Id (optional, default to )
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func paymentPost(iUserId: String, iBookingId: String, iUserCardDetailId: String, vCustomerId: String, vCardToken: String, dcAmount: String, accessToken: String, iDealId: String? = nil, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        paymentPostWithRequestBuilder(iUserId: iUserId, iBookingId: iBookingId, iUserCardDetailId: iUserCardDetailId, vCustomerId: vCustomerId, vCardToken: vCardToken, dcAmount: dcAmount, accessToken: accessToken, iDealId: iDealId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Make payment
     - POST /payment
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Payment success."
}}]
     
     - parameter iUserId: (form) User Id 
     - parameter iBookingId: (form) Booking Id 
     - parameter iUserCardDetailId: (form) User Card Detail Id 
     - parameter vCustomerId: (form) Customer Id 
     - parameter vCardToken: (form) Card Token 
     - parameter dcAmount: (form) Amount 
     - parameter accessToken: (header)  
     - parameter iDealId: (form) Deal Id (optional, default to )

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func paymentPostWithRequestBuilder(iUserId: String, iBookingId: String, iUserCardDetailId: String, vCustomerId: String, vCardToken: String, dcAmount: String, accessToken: String, iDealId: String? = nil) -> RequestBuilder<SuccessResponse> {
        let path = "/payment"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iUserId": iUserId,
            "iBookingId": iBookingId,
            "iDealId": iDealId,
            "iUserCardDetailId": iUserCardDetailId,
            "vCustomerId": vCustomerId,
            "vCardToken": vCardToken,
            "dcAmount": dcAmount
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "AccessToken": accessToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
