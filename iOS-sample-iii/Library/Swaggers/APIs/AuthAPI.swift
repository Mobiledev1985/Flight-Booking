//
// AuthAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthAPI {
    /**
     * enum for parameter tiUserType
     */
    public enum TiUserType_authFacebookPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     * enum for parameter tiDeviceType
     */
    public enum TiDeviceType_authFacebookPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     User Login with Facebook
     
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 
     - parameter vSocialSignupId: (form) Facebook token (optional, default to ya29.Glt3BiDXnPGPXWCspqaSk7LKaDQhLdJUjBAIhcU9aBsqs5hW7pbx9k3Iut1DtstPYTIxtR6CFuVkcPz0rp3Iocg*e0o-20hA-0MWeBqAN-8R6Zmv1s_5U_IavLo3C)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authFacebookPost(tiUserType: TiUserType_authFacebookPost, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_authFacebookPost, vSocialSignupId: String? = nil, completion: @escaping ((_ data: LoginWithFacebookResponse?,_ error: Error?) -> Void)) {
        authFacebookPostWithRequestBuilder(tiUserType: tiUserType, vDeviceToken: vDeviceToken, vDeviceName: vDeviceName, vDeviceUniqueId: vDeviceUniqueId, vUserDeviceLanguage: vUserDeviceLanguage, dcLatitude: dcLatitude, dcLongitude: dcLongitude, tiDeviceType: tiDeviceType, vSocialSignupId: vSocialSignupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     User Login with Facebook
     - POST /auth/facebook
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "User information",
  "data" : {
    "iUserId" : 37,
    "vUserName" : "aaa",
    "vEmail" : "aa11@aaa.com",
    "vPhone" : "",
    "tiUserType" : 0,
    "tiIsSocialLogin" : 1,
    "tiIsGuestUser" : 0,
    "tiIsActive" : 1,
    "accessToken" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjEyMjg5YjE2MGY4NmFjYTkwZjVmZDVlYjE3NTQ4M2Y4MmU4ZTUzYmIxZjI5NzBiZDI0OTkyMGJjYjQwYTA5MGFkZWMxOGM3YzVhNjE5NTY0In0.eyJhdWQiOiIxIiwianRpIjoiMTIyODliMTYwZjg2YWNhOTBmNWZkNWViMTc1NDgzZjgyZThlNTNiYjFmMjk3MGJkMjQ5OTIwYmNiNDBhMDkwYWRlYzE4YzdjNWE2MTk1NjQiLCJpYXQiOjE1ODIwMTQxMDQsIm5iZiI6MTU4MjAxNDEwNCwiZXhwIjoxNjEzNjM2NTAzLCJzdWIiOiIzNyIsInNjb3BlcyI6W119.mquTwMx1OzHk_u3vgiuvlKvf895hYhNA5FYpuzWB1f1-7BZkI0czaBO2nCriX7jyj1xhRQnW7XF5Vhh7cIXvHQGoDZCZY9MMFDFMcx7nr0gfr_qrmBeprnJeM_wVd39_ruqZ1eA9tAYaL3k4fE4puqb_JMy7r2feZDlQEqv3eBDj333Wq7dns364i8K4WEc5XVrs-GYDOOEExlYUCo1_LplXJ-3tzu5A-2CLSS_LQdHnDEboha1dbWvNYSW4pLSAuyF4oAMwiWIRA0QHyN2Ml1a6lX7lzE6plGRYTBhNg9n2apvk0OamDOTXLF5jtu4LncuandgTkNyydAYoyLsVgBUWsHz8CAR4rlIYRljZ4Ek4oe4BmUlsjNxNJa1AhW_enZowPUmgi1_rSli8ncZoxshjwP27NsygKf5cj8-2rSD2jFXy3AF1u2fb5H8GkjsePj-nant-c1e1W2cI5BD_BYQMJPeFfCv1L4hUuQUkuLypPxEjnAbuLGDEcZioVXjZ2RSNZUfQZ0bzbf2VRd-PsoDPIr6snqRfZpF5or2ue4ymaLUklfhWBCNGMa9uNPjlD7JChuI4EsHUMQXMkNN_LbBRdOJBvkGcg4F4b0QOVPkez3BbO_YNuTkkI3mgc0i8sPC4cNunMjYZuMPGk0spEDYUbXZV8Cz7xdpzBqvaQ1Q"
  }
}}]
     
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 
     - parameter vSocialSignupId: (form) Facebook token (optional, default to ya29.Glt3BiDXnPGPXWCspqaSk7LKaDQhLdJUjBAIhcU9aBsqs5hW7pbx9k3Iut1DtstPYTIxtR6CFuVkcPz0rp3Iocg*e0o-20hA-0MWeBqAN-8R6Zmv1s_5U_IavLo3C)

     - returns: RequestBuilder<LoginWithFacebookResponse> 
     */
    open class func authFacebookPostWithRequestBuilder(tiUserType: TiUserType_authFacebookPost, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_authFacebookPost, vSocialSignupId: String? = nil) -> RequestBuilder<LoginWithFacebookResponse> {
        let path = "/auth/facebook"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "vSocialSignupId": vSocialSignupId,
            "tiUserType": tiUserType.rawValue,
            "vDeviceToken": vDeviceToken,
            "vDeviceName": vDeviceName,
            "vDeviceUniqueId": vDeviceUniqueId,
            "vUserDeviceLanguage": vUserDeviceLanguage,
            "dcLatitude": dcLatitude,
            "dcLongitude": dcLongitude,
            "tiDeviceType": tiDeviceType.rawValue
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LoginWithFacebookResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tiUserType
     */
    public enum TiUserType_authGooglePost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     * enum for parameter tiDeviceType
     */
    public enum TiDeviceType_authGooglePost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     User Login with Google
     
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 
     - parameter vSocialSignupId: (form) Google token (optional, default to ya29.Glt3BiDXnPGPXWCspqaSk7LKaDQhLdJUjBAIhcU9aBsqs5hW7pbx9k3Iut1DtstPYTIxtR6CFuVkcPz0rp3Iocg*e0o-20hA-0MWeBqAN-8R6Zmv1s_5U_IavLo3C)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authGooglePost(tiUserType: TiUserType_authGooglePost, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_authGooglePost, vSocialSignupId: String? = nil, completion: @escaping ((_ data: LoginWithGoogleResponse?,_ error: Error?) -> Void)) {
        authGooglePostWithRequestBuilder(tiUserType: tiUserType, vDeviceToken: vDeviceToken, vDeviceName: vDeviceName, vDeviceUniqueId: vDeviceUniqueId, vUserDeviceLanguage: vUserDeviceLanguage, dcLatitude: dcLatitude, dcLongitude: dcLongitude, tiDeviceType: tiDeviceType, vSocialSignupId: vSocialSignupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     User Login with Google
     - POST /auth/google
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "User information",
  "data" : {
    "iUserId" : 37,
    "vUserName" : "aaa",
    "vEmail" : "aa11@aaa.com",
    "vPhone" : "",
    "tiUserType" : 0,
    "tiIsSocialLogin" : 1,
    "tiIsGuestUser" : 0,
    "tiIsActive" : 1,
    "accessToken" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjEyMjg5YjE2MGY4NmFjYTkwZjVmZDVlYjE3NTQ4M2Y4MmU4ZTUzYmIxZjI5NzBiZDI0OTkyMGJjYjQwYTA5MGFkZWMxOGM3YzVhNjE5NTY0In0.eyJhdWQiOiIxIiwianRpIjoiMTIyODliMTYwZjg2YWNhOTBmNWZkNWViMTc1NDgzZjgyZThlNTNiYjFmMjk3MGJkMjQ5OTIwYmNiNDBhMDkwYWRlYzE4YzdjNWE2MTk1NjQiLCJpYXQiOjE1ODIwMTQxMDQsIm5iZiI6MTU4MjAxNDEwNCwiZXhwIjoxNjEzNjM2NTAzLCJzdWIiOiIzNyIsInNjb3BlcyI6W119.mquTwMx1OzHk_u3vgiuvlKvf895hYhNA5FYpuzWB1f1-7BZkI0czaBO2nCriX7jyj1xhRQnW7XF5Vhh7cIXvHQGoDZCZY9MMFDFMcx7nr0gfr_qrmBeprnJeM_wVd39_ruqZ1eA9tAYaL3k4fE4puqb_JMy7r2feZDlQEqv3eBDj333Wq7dns364i8K4WEc5XVrs-GYDOOEExlYUCo1_LplXJ-3tzu5A-2CLSS_LQdHnDEboha1dbWvNYSW4pLSAuyF4oAMwiWIRA0QHyN2Ml1a6lX7lzE6plGRYTBhNg9n2apvk0OamDOTXLF5jtu4LncuandgTkNyydAYoyLsVgBUWsHz8CAR4rlIYRljZ4Ek4oe4BmUlsjNxNJa1AhW_enZowPUmgi1_rSli8ncZoxshjwP27NsygKf5cj8-2rSD2jFXy3AF1u2fb5H8GkjsePj-nant-c1e1W2cI5BD_BYQMJPeFfCv1L4hUuQUkuLypPxEjnAbuLGDEcZioVXjZ2RSNZUfQZ0bzbf2VRd-PsoDPIr6snqRfZpF5or2ue4ymaLUklfhWBCNGMa9uNPjlD7JChuI4EsHUMQXMkNN_LbBRdOJBvkGcg4F4b0QOVPkez3BbO_YNuTkkI3mgc0i8sPC4cNunMjYZuMPGk0spEDYUbXZV8Cz7xdpzBqvaQ1Q"
  }
}}]
     
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 
     - parameter vSocialSignupId: (form) Google token (optional, default to ya29.Glt3BiDXnPGPXWCspqaSk7LKaDQhLdJUjBAIhcU9aBsqs5hW7pbx9k3Iut1DtstPYTIxtR6CFuVkcPz0rp3Iocg*e0o-20hA-0MWeBqAN-8R6Zmv1s_5U_IavLo3C)

     - returns: RequestBuilder<LoginWithGoogleResponse> 
     */
    open class func authGooglePostWithRequestBuilder(tiUserType: TiUserType_authGooglePost, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_authGooglePost, vSocialSignupId: String? = nil) -> RequestBuilder<LoginWithGoogleResponse> {
        let path = "/auth/google"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "vSocialSignupId": vSocialSignupId,
            "tiUserType": tiUserType.rawValue,
            "vDeviceToken": vDeviceToken,
            "vDeviceName": vDeviceName,
            "vDeviceUniqueId": vDeviceUniqueId,
            "vUserDeviceLanguage": vUserDeviceLanguage,
            "dcLatitude": dcLatitude,
            "dcLongitude": dcLongitude,
            "tiDeviceType": tiDeviceType.rawValue
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LoginWithGoogleResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tiUserType
     */
    public enum TiUserType_forgotPasswordPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     Forgot Password
     
     - parameter vEmail: (form) Email address 
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPasswordPost(vEmail: String, tiUserType: TiUserType_forgotPasswordPost, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        forgotPasswordPostWithRequestBuilder(vEmail: vEmail, tiUserType: tiUserType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Forgot Password
     - POST /forgot_password
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Temparory Pasword has been sent to your email address, Please check your mail inbox."
}}]
     
     - parameter vEmail: (form) Email address 
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func forgotPasswordPostWithRequestBuilder(vEmail: String, tiUserType: TiUserType_forgotPasswordPost) -> RequestBuilder<SuccessResponse> {
        let path = "/forgot_password"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "vEmail": vEmail,
            "tiUserType": tiUserType.rawValue
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tiUserType
     */
    public enum TiUserType_guestLoginPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     * enum for parameter tiDeviceType
     */
    public enum TiDeviceType_guestLoginPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     Guest Login
     
     - parameter vUserName: (form) Full Name 
     - parameter vPhone: (form) Phone 
     - parameter vEmail: (form) Email address 
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vIdProof: (form) Upload Id Proof 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 
     - parameter tiIsPushEnabled: (form) Push Enabled (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func guestLoginPost(vUserName: String, vPhone: String, vEmail: String, tiUserType: TiUserType_guestLoginPost, vIdProof: URL, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_guestLoginPost, tiIsPushEnabled: String? = nil, completion: @escaping ((_ data: GuestLoginResponse?,_ error: Error?) -> Void)) {
        guestLoginPostWithRequestBuilder(vUserName: vUserName, vPhone: vPhone, vEmail: vEmail, tiUserType: tiUserType, vIdProof: vIdProof, vDeviceToken: vDeviceToken, vDeviceName: vDeviceName, vDeviceUniqueId: vDeviceUniqueId, vUserDeviceLanguage: vUserDeviceLanguage, dcLatitude: dcLatitude, dcLongitude: dcLongitude, tiDeviceType: tiDeviceType, tiIsPushEnabled: tiIsPushEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Guest Login
     - POST /guest_login
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "User information",
  "data" : {
    "iUserId" : 36,
    "vUserName" : "aaa",
    "vEmail" : "aa@aaa.com",
    "vPhone" : "1111111",
    "tiUserType" : 0,
    "tiIsSocialLogin" : 0,
    "tiIsGuestUser" : 0,
    "tiIsActive" : 0,
    "accessToken" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6Ijc0NGY3NTQ5ODM0Y2EwMjg0MzQyNzNlMmIyMTJmNDRiNGQxMTZmZjc0MzYyMDk2ZDc4YzU0NDAzZjY4ZTU0NmQ2OGYxZjdiNjA3N2M0NGU0In0.eyJhdWQiOiIxIiwianRpIjoiNzQ0Zjc1NDk4MzRjYTAyODQzNDI3M2UyYjIxMmY0NGI0ZDExNmZmNzQzNjIwOTZkNzhjNTQ0MDNmNjhlNTQ2ZDY4ZjFmN2I2MDc3YzQ0ZTQiLCJpYXQiOjE1ODIwMDQzMzksIm5iZiI6MTU4MjAwNDMzOSwiZXhwIjoxNjEzNjI2NzM5LCJzdWIiOiIzNiIsInNjb3BlcyI6W119.OVRBQmzejyt6kLLXx2rdF_8ixsHhmyZ1sRXHpNMvlVHwL2w6zYiAG2oMmDiEoKb2Ezh4IHm94ty2G3iXZLJOS6IWMcjFtdcKWXflCfUoA-Zq-6FTvwp5s3YIwC89DBrTxC3-aJqTnquu8K59BQVDSkF0U__-m41XxuejsWY4tbawScs4lrERI1RzW01qNDly7ypsJ9v7SCHKTUs_cu4QyGzo5DCoLcxeM7hCPCSWGfkTsote58AT0l5OTmPUWTOWirM4jrLee_B2fJXG1P4CxlGV6AkvStA-mzOvtQbSBeljizTYIZNqXdpL4kqfdR0OHJqCvYAmJHpbIGG8J3Ug1K0_lefTr9PnLrxRgO-rBam5E4EwS1sG1PsMIyylyw5oT3KPnmEx72XcbN88528o6yqQZ1xofh2lQAO9CPr9-dTpU_L9hSaH1QZ3QPXrC8_NMZnoQBzYp8HbDl-otl-v18FKs25vzpuUzwZExzLj8wRM9bYJlIlDamWphCEv8-mhYWV-V2_zw8UJKGbtubIk-RSt6Dmfa7illNHxyaKC3c3vv0XF6CcSwFiyX5iJLmkggXnlxoIxEJFwv0hBgAp8YCjh7dISw-tO1o6d3USe2OAVVHYkhsUnpYx-yv0Ditq22fgl8vIXpP_fT90DHRXnFVUzeGtad2Gqf3pWgcrOFiE"
  }
}}]
     
     - parameter vUserName: (form) Full Name 
     - parameter vPhone: (form) Phone 
     - parameter vEmail: (form) Email address 
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vIdProof: (form) Upload Id Proof 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 
     - parameter tiIsPushEnabled: (form) Push Enabled (optional, default to 1)

     - returns: RequestBuilder<GuestLoginResponse> 
     */
    open class func guestLoginPostWithRequestBuilder(vUserName: String, vPhone: String, vEmail: String, tiUserType: TiUserType_guestLoginPost, vIdProof: URL, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_guestLoginPost, tiIsPushEnabled: String? = nil) -> RequestBuilder<GuestLoginResponse> {
        let path = "/guest_login"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "vUserName": vUserName,
            "vPhone": vPhone,
            "vEmail": vEmail,
            "tiUserType": tiUserType.rawValue,
            "vIdProof": vIdProof,
            "vDeviceToken": vDeviceToken,
            "vDeviceName": vDeviceName,
            "vDeviceUniqueId": vDeviceUniqueId,
            "vUserDeviceLanguage": vUserDeviceLanguage,
            "dcLatitude": dcLatitude,
            "dcLongitude": dcLongitude,
            "tiDeviceType": tiDeviceType.rawValue,
            "tiIsPushEnabled": tiIsPushEnabled
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GuestLoginResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tiUserType
     */
    public enum TiUserType_loginPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     * enum for parameter tiDeviceType
     */
    public enum TiDeviceType_loginPost: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     User login
     
     - parameter vEmail: (form) Email address 
     - parameter password: (form) Password 
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginPost(vEmail: String, password: String, tiUserType: TiUserType_loginPost, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_loginPost, completion: @escaping ((_ data: LoginResponse?,_ error: Error?) -> Void)) {
        loginPostWithRequestBuilder(vEmail: vEmail, password: password, tiUserType: tiUserType, vDeviceToken: vDeviceToken, vDeviceName: vDeviceName, vDeviceUniqueId: vDeviceUniqueId, vUserDeviceLanguage: vUserDeviceLanguage, dcLatitude: dcLatitude, dcLongitude: dcLongitude, tiDeviceType: tiDeviceType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     User login
     - POST /login
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "User information",
  "data" : {
    "iUserId" : 37,
    "vUserName" : "aaa",
    "vEmail" : "aa11@aaa.com",
    "vPhone" : "1111111",
    "vProfileImage" : "profile-image.jpeg",
    "tiUserType" : 0,
    "tisOTPVerify" : 1,
    "tiIsSocialLogin" : 0,
    "tiIsGuestUser" : 0,
    "tiIsActive" : 1,
    "accessToken" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjEyMjg5YjE2MGY4NmFjYTkwZjVmZDVlYjE3NTQ4M2Y4MmU4ZTUzYmIxZjI5NzBiZDI0OTkyMGJjYjQwYTA5MGFkZWMxOGM3YzVhNjE5NTY0In0.eyJhdWQiOiIxIiwianRpIjoiMTIyODliMTYwZjg2YWNhOTBmNWZkNWViMTc1NDgzZjgyZThlNTNiYjFmMjk3MGJkMjQ5OTIwYmNiNDBhMDkwYWRlYzE4YzdjNWE2MTk1NjQiLCJpYXQiOjE1ODIwMTQxMDQsIm5iZiI6MTU4MjAxNDEwNCwiZXhwIjoxNjEzNjM2NTAzLCJzdWIiOiIzNyIsInNjb3BlcyI6W119.mquTwMx1OzHk_u3vgiuvlKvf895hYhNA5FYpuzWB1f1-7BZkI0czaBO2nCriX7jyj1xhRQnW7XF5Vhh7cIXvHQGoDZCZY9MMFDFMcx7nr0gfr_qrmBeprnJeM_wVd39_ruqZ1eA9tAYaL3k4fE4puqb_JMy7r2feZDlQEqv3eBDj333Wq7dns364i8K4WEc5XVrs-GYDOOEExlYUCo1_LplXJ-3tzu5A-2CLSS_LQdHnDEboha1dbWvNYSW4pLSAuyF4oAMwiWIRA0QHyN2Ml1a6lX7lzE6plGRYTBhNg9n2apvk0OamDOTXLF5jtu4LncuandgTkNyydAYoyLsVgBUWsHz8CAR4rlIYRljZ4Ek4oe4BmUlsjNxNJa1AhW_enZowPUmgi1_rSli8ncZoxshjwP27NsygKf5cj8-2rSD2jFXy3AF1u2fb5H8GkjsePj-nant-c1e1W2cI5BD_BYQMJPeFfCv1L4hUuQUkuLypPxEjnAbuLGDEcZioVXjZ2RSNZUfQZ0bzbf2VRd-PsoDPIr6snqRfZpF5or2ue4ymaLUklfhWBCNGMa9uNPjlD7JChuI4EsHUMQXMkNN_LbBRdOJBvkGcg4F4b0QOVPkez3BbO_YNuTkkI3mgc0i8sPC4cNunMjYZuMPGk0spEDYUbXZV8Cz7xdpzBqvaQ1Q"
  }
}}]
     
     - parameter vEmail: (form) Email address 
     - parameter password: (form) Password 
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 

     - returns: RequestBuilder<LoginResponse> 
     */
    open class func loginPostWithRequestBuilder(vEmail: String, password: String, tiUserType: TiUserType_loginPost, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_loginPost) -> RequestBuilder<LoginResponse> {
        let path = "/login"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "vEmail": vEmail,
            "password": password,
            "tiUserType": tiUserType.rawValue,
            "vDeviceToken": vDeviceToken,
            "vDeviceName": vDeviceName,
            "vDeviceUniqueId": vDeviceUniqueId,
            "vUserDeviceLanguage": vUserDeviceLanguage,
            "dcLatitude": dcLatitude,
            "dcLongitude": dcLongitude,
            "tiDeviceType": tiDeviceType.rawValue
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LoginResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     logout
     
     - parameter accessToken: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logoutGet(accessToken: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        logoutGetWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     logout
     - GET /logout
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Logout success."
}}]
     
     - parameter accessToken: (header)  

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func logoutGetWithRequestBuilder(accessToken: String) -> RequestBuilder<SuccessResponse> {
        let path = "/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "AccessToken": accessToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     get Country Phone code list
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func phoneCodeListGet(completion: @escaping ((_ data: CountryPhoneCodeListResponse?,_ error: Error?) -> Void)) {
        phoneCodeListGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     get Country Phone code list
     - GET /phone_code_list
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Countries information",
  "data" : [ {
    "iso" : "AF",
    "nicename" : "Afghanistan",
    "phonecode" : 93
  }, {
    "iso" : "AL",
    "nicename" : "Albania",
    "phonecode" : 355
  }, {
    "iso" : "DZ",
    "nicename" : "Algeria",
    "phonecode" : 213
  }, {
    "iso" : "AS",
    "nicename" : "American Samoa",
    "phonecode" : 1684
  }, {
    "iso" : "AD",
    "nicename" : "Andorra",
    "phonecode" : 376
  }, {
    "iso" : "AO",
    "nicename" : "Angola",
    "phonecode" : 244
  }, {
    "iso" : "AI",
    "nicename" : "Anguilla",
    "phonecode" : 1264
  }, {
    "iso" : "AQ",
    "nicename" : "Antarctica",
    "phonecode" : 0
  }, {
    "iso" : "AG",
    "nicename" : "Antigua and Barbuda",
    "phonecode" : 1268
  }, {
    "iso" : "AR",
    "nicename" : "Argentina",
    "phonecode" : 54
  }, {
    "iso" : "AM",
    "nicename" : "Armenia",
    "phonecode" : 374
  }, {
    "iso" : "AW",
    "nicename" : "Aruba",
    "phonecode" : 297
  }, {
    "iso" : "AU",
    "nicename" : "Australia",
    "phonecode" : 61
  }, {
    "iso" : "AT",
    "nicename" : "Austria",
    "phonecode" : 43
  }, {
    "iso" : "AZ",
    "nicename" : "Azerbaijan",
    "phonecode" : 994
  }, {
    "iso" : "BS",
    "nicename" : "Bahamas",
    "phonecode" : 1242
  }, {
    "iso" : "BH",
    "nicename" : "Bahrain",
    "phonecode" : 973
  }, {
    "iso" : "BD",
    "nicename" : "Bangladesh",
    "phonecode" : 880
  }, {
    "iso" : "BB",
    "nicename" : "Barbados",
    "phonecode" : 1246
  }, {
    "iso" : "BY",
    "nicename" : "Belarus",
    "phonecode" : 375
  }, {
    "iso" : "BE",
    "nicename" : "Belgium",
    "phonecode" : 32
  }, {
    "iso" : "BZ",
    "nicename" : "Belize",
    "phonecode" : 501
  }, {
    "iso" : "BJ",
    "nicename" : "Benin",
    "phonecode" : 229
  }, {
    "iso" : "BM",
    "nicename" : "Bermuda",
    "phonecode" : 1441
  }, {
    "iso" : "BT",
    "nicename" : "Bhutan",
    "phonecode" : 975
  }, {
    "iso" : "BO",
    "nicename" : "Bolivia",
    "phonecode" : 591
  }, {
    "iso" : "BA",
    "nicename" : "Bosnia and Herzegovina",
    "phonecode" : 387
  }, {
    "iso" : "BW",
    "nicename" : "Botswana",
    "phonecode" : 267
  }, {
    "iso" : "BV",
    "nicename" : "Bouvet Island",
    "phonecode" : 0
  }, {
    "iso" : "BR",
    "nicename" : "Brazil",
    "phonecode" : 55
  }, {
    "iso" : "IO",
    "nicename" : "British Indian Ocean Territory",
    "phonecode" : 246
  }, {
    "iso" : "BN",
    "nicename" : "Brunei Darussalam",
    "phonecode" : 673
  }, {
    "iso" : "BG",
    "nicename" : "Bulgaria",
    "phonecode" : 359
  }, {
    "iso" : "BF",
    "nicename" : "Burkina Faso",
    "phonecode" : 226
  }, {
    "iso" : "BI",
    "nicename" : "Burundi",
    "phonecode" : 257
  }, {
    "iso" : "KH",
    "nicename" : "Cambodia",
    "phonecode" : 855
  }, {
    "iso" : "CM",
    "nicename" : "Cameroon",
    "phonecode" : 237
  }, {
    "iso" : "CA",
    "nicename" : "Canada",
    "phonecode" : 1
  }, {
    "iso" : "CV",
    "nicename" : "Cape Verde",
    "phonecode" : 238
  }, {
    "iso" : "KY",
    "nicename" : "Cayman Islands",
    "phonecode" : 1345
  }, {
    "iso" : "CF",
    "nicename" : "Central African Republic",
    "phonecode" : 236
  }, {
    "iso" : "TD",
    "nicename" : "Chad",
    "phonecode" : 235
  }, {
    "iso" : "CL",
    "nicename" : "Chile",
    "phonecode" : 56
  }, {
    "iso" : "CN",
    "nicename" : "China",
    "phonecode" : 86
  }, {
    "iso" : "CX",
    "nicename" : "Christmas Island",
    "phonecode" : 61
  }, {
    "iso" : "CC",
    "nicename" : "Cocos (Keeling) Islands",
    "phonecode" : 672
  }, {
    "iso" : "CO",
    "nicename" : "Colombia",
    "phonecode" : 57
  }, {
    "iso" : "KM",
    "nicename" : "Comoros",
    "phonecode" : 269
  }, {
    "iso" : "CG",
    "nicename" : "Congo",
    "phonecode" : 242
  }, {
    "iso" : "CD",
    "nicename" : "Congo, the Democratic Republic of the",
    "phonecode" : 242
  }, {
    "iso" : "CK",
    "nicename" : "Cook Islands",
    "phonecode" : 682
  }, {
    "iso" : "CR",
    "nicename" : "Costa Rica",
    "phonecode" : 506
  }, {
    "iso" : "CI",
    "nicename" : "Cote D'Ivoire",
    "phonecode" : 225
  }, {
    "iso" : "HR",
    "nicename" : "Croatia",
    "phonecode" : 385
  }, {
    "iso" : "CU",
    "nicename" : "Cuba",
    "phonecode" : 53
  }, {
    "iso" : "CY",
    "nicename" : "Cyprus",
    "phonecode" : 357
  }, {
    "iso" : "CZ",
    "nicename" : "Czech Republic",
    "phonecode" : 420
  }, {
    "iso" : "DK",
    "nicename" : "Denmark",
    "phonecode" : 45
  }, {
    "iso" : "DJ",
    "nicename" : "Djibouti",
    "phonecode" : 253
  }, {
    "iso" : "DM",
    "nicename" : "Dominica",
    "phonecode" : 1767
  }, {
    "iso" : "DO",
    "nicename" : "Dominican Republic",
    "phonecode" : 1809
  }, {
    "iso" : "EC",
    "nicename" : "Ecuador",
    "phonecode" : 593
  }, {
    "iso" : "EG",
    "nicename" : "Egypt",
    "phonecode" : 20
  }, {
    "iso" : "SV",
    "nicename" : "El Salvador",
    "phonecode" : 503
  }, {
    "iso" : "GQ",
    "nicename" : "Equatorial Guinea",
    "phonecode" : 240
  }, {
    "iso" : "ER",
    "nicename" : "Eritrea",
    "phonecode" : 291
  }, {
    "iso" : "EE",
    "nicename" : "Estonia",
    "phonecode" : 372
  }, {
    "iso" : "ET",
    "nicename" : "Ethiopia",
    "phonecode" : 251
  }, {
    "iso" : "FK",
    "nicename" : "Falkland Islands (Malvinas)",
    "phonecode" : 500
  }, {
    "iso" : "FO",
    "nicename" : "Faroe Islands",
    "phonecode" : 298
  }, {
    "iso" : "FJ",
    "nicename" : "Fiji",
    "phonecode" : 679
  }, {
    "iso" : "FI",
    "nicename" : "Finland",
    "phonecode" : 358
  }, {
    "iso" : "FR",
    "nicename" : "France",
    "phonecode" : 33
  }, {
    "iso" : "GF",
    "nicename" : "French Guiana",
    "phonecode" : 594
  }, {
    "iso" : "PF",
    "nicename" : "French Polynesia",
    "phonecode" : 689
  }, {
    "iso" : "TF",
    "nicename" : "French Southern Territories",
    "phonecode" : 0
  }, {
    "iso" : "GA",
    "nicename" : "Gabon",
    "phonecode" : 241
  }, {
    "iso" : "GM",
    "nicename" : "Gambia",
    "phonecode" : 220
  }, {
    "iso" : "GE",
    "nicename" : "Georgia",
    "phonecode" : 995
  }, {
    "iso" : "DE",
    "nicename" : "Germany",
    "phonecode" : 49
  }, {
    "iso" : "GH",
    "nicename" : "Ghana",
    "phonecode" : 233
  }, {
    "iso" : "GI",
    "nicename" : "Gibraltar",
    "phonecode" : 350
  }, {
    "iso" : "GR",
    "nicename" : "Greece",
    "phonecode" : 30
  }, {
    "iso" : "GL",
    "nicename" : "Greenland",
    "phonecode" : 299
  }, {
    "iso" : "GD",
    "nicename" : "Grenada",
    "phonecode" : 1473
  }, {
    "iso" : "GP",
    "nicename" : "Guadeloupe",
    "phonecode" : 590
  }, {
    "iso" : "GU",
    "nicename" : "Guam",
    "phonecode" : 1671
  }, {
    "iso" : "GT",
    "nicename" : "Guatemala",
    "phonecode" : 502
  }, {
    "iso" : "GN",
    "nicename" : "Guinea",
    "phonecode" : 224
  }, {
    "iso" : "GW",
    "nicename" : "Guinea-Bissau",
    "phonecode" : 245
  }, {
    "iso" : "GY",
    "nicename" : "Guyana",
    "phonecode" : 592
  }, {
    "iso" : "HT",
    "nicename" : "Haiti",
    "phonecode" : 509
  }, {
    "iso" : "HM",
    "nicename" : "Heard Island and Mcdonald Islands",
    "phonecode" : 0
  }, {
    "iso" : "VA",
    "nicename" : "Holy See (Vatican City State)",
    "phonecode" : 39
  }, {
    "iso" : "HN",
    "nicename" : "Honduras",
    "phonecode" : 504
  }, {
    "iso" : "HK",
    "nicename" : "Hong Kong",
    "phonecode" : 852
  }, {
    "iso" : "HU",
    "nicename" : "Hungary",
    "phonecode" : 36
  }, {
    "iso" : "IS",
    "nicename" : "Iceland",
    "phonecode" : 354
  }, {
    "iso" : "IN",
    "nicename" : "India",
    "phonecode" : 91
  }, {
    "iso" : "ID",
    "nicename" : "Indonesia",
    "phonecode" : 62
  }, {
    "iso" : "IR",
    "nicename" : "Iran, Islamic Republic of",
    "phonecode" : 98
  }, {
    "iso" : "IQ",
    "nicename" : "Iraq",
    "phonecode" : 964
  }, {
    "iso" : "IE",
    "nicename" : "Ireland",
    "phonecode" : 353
  }, {
    "iso" : "IL",
    "nicename" : "Israel",
    "phonecode" : 972
  }, {
    "iso" : "IT",
    "nicename" : "Italy",
    "phonecode" : 39
  }, {
    "iso" : "JM",
    "nicename" : "Jamaica",
    "phonecode" : 1876
  }, {
    "iso" : "JP",
    "nicename" : "Japan",
    "phonecode" : 81
  }, {
    "iso" : "JO",
    "nicename" : "Jordan",
    "phonecode" : 962
  }, {
    "iso" : "KZ",
    "nicename" : "Kazakhstan",
    "phonecode" : 7
  }, {
    "iso" : "KE",
    "nicename" : "Kenya",
    "phonecode" : 254
  }, {
    "iso" : "KI",
    "nicename" : "Kiribati",
    "phonecode" : 686
  }, {
    "iso" : "KP",
    "nicename" : "Korea, Democratic People's Republic of",
    "phonecode" : 850
  }, {
    "iso" : "KR",
    "nicename" : "Korea, Republic of",
    "phonecode" : 82
  }, {
    "iso" : "KW",
    "nicename" : "Kuwait",
    "phonecode" : 965
  }, {
    "iso" : "KG",
    "nicename" : "Kyrgyzstan",
    "phonecode" : 996
  }, {
    "iso" : "LA",
    "nicename" : "Lao People's Democratic Republic",
    "phonecode" : 856
  }, {
    "iso" : "LV",
    "nicename" : "Latvia",
    "phonecode" : 371
  }, {
    "iso" : "LB",
    "nicename" : "Lebanon",
    "phonecode" : 961
  }, {
    "iso" : "LS",
    "nicename" : "Lesotho",
    "phonecode" : 266
  }, {
    "iso" : "LR",
    "nicename" : "Liberia",
    "phonecode" : 231
  }, {
    "iso" : "LY",
    "nicename" : "Libyan Arab Jamahiriya",
    "phonecode" : 218
  }, {
    "iso" : "LI",
    "nicename" : "Liechtenstein",
    "phonecode" : 423
  }, {
    "iso" : "LT",
    "nicename" : "Lithuania",
    "phonecode" : 370
  }, {
    "iso" : "LU",
    "nicename" : "Luxembourg",
    "phonecode" : 352
  }, {
    "iso" : "MO",
    "nicename" : "Macao",
    "phonecode" : 853
  }, {
    "iso" : "MK",
    "nicename" : "Macedonia, the Former Yugoslav Republic of",
    "phonecode" : 389
  }, {
    "iso" : "MG",
    "nicename" : "Madagascar",
    "phonecode" : 261
  }, {
    "iso" : "MW",
    "nicename" : "Malawi",
    "phonecode" : 265
  }, {
    "iso" : "MY",
    "nicename" : "Malaysia",
    "phonecode" : 60
  }, {
    "iso" : "MV",
    "nicename" : "Maldives",
    "phonecode" : 960
  }, {
    "iso" : "ML",
    "nicename" : "Mali",
    "phonecode" : 223
  }, {
    "iso" : "MT",
    "nicename" : "Malta",
    "phonecode" : 356
  }, {
    "iso" : "MH",
    "nicename" : "Marshall Islands",
    "phonecode" : 692
  }, {
    "iso" : "MQ",
    "nicename" : "Martinique",
    "phonecode" : 596
  }, {
    "iso" : "MR",
    "nicename" : "Mauritania",
    "phonecode" : 222
  }, {
    "iso" : "MU",
    "nicename" : "Mauritius",
    "phonecode" : 230
  }, {
    "iso" : "YT",
    "nicename" : "Mayotte",
    "phonecode" : 269
  }, {
    "iso" : "MX",
    "nicename" : "Mexico",
    "phonecode" : 52
  }, {
    "iso" : "FM",
    "nicename" : "Micronesia, Federated States of",
    "phonecode" : 691
  }, {
    "iso" : "MD",
    "nicename" : "Moldova, Republic of",
    "phonecode" : 373
  }, {
    "iso" : "MC",
    "nicename" : "Monaco",
    "phonecode" : 377
  }, {
    "iso" : "MN",
    "nicename" : "Mongolia",
    "phonecode" : 976
  }, {
    "iso" : "MS",
    "nicename" : "Montserrat",
    "phonecode" : 1664
  }, {
    "iso" : "MA",
    "nicename" : "Morocco",
    "phonecode" : 212
  }, {
    "iso" : "MZ",
    "nicename" : "Mozambique",
    "phonecode" : 258
  }, {
    "iso" : "MM",
    "nicename" : "Myanmar",
    "phonecode" : 95
  }, {
    "iso" : "NA",
    "nicename" : "Namibia",
    "phonecode" : 264
  }, {
    "iso" : "NR",
    "nicename" : "Nauru",
    "phonecode" : 674
  }, {
    "iso" : "NP",
    "nicename" : "Nepal",
    "phonecode" : 977
  }, {
    "iso" : "NL",
    "nicename" : "Netherlands",
    "phonecode" : 31
  }, {
    "iso" : "AN",
    "nicename" : "Netherlands Antilles",
    "phonecode" : 599
  }, {
    "iso" : "NC",
    "nicename" : "New Caledonia",
    "phonecode" : 687
  }, {
    "iso" : "NZ",
    "nicename" : "New Zealand",
    "phonecode" : 64
  }, {
    "iso" : "NI",
    "nicename" : "Nicaragua",
    "phonecode" : 505
  }, {
    "iso" : "NE",
    "nicename" : "Niger",
    "phonecode" : 227
  }, {
    "iso" : "NG",
    "nicename" : "Nigeria",
    "phonecode" : 234
  }, {
    "iso" : "NU",
    "nicename" : "Niue",
    "phonecode" : 683
  }, {
    "iso" : "NF",
    "nicename" : "Norfolk Island",
    "phonecode" : 672
  }, {
    "iso" : "MP",
    "nicename" : "Northern Mariana Islands",
    "phonecode" : 1670
  }, {
    "iso" : "NO",
    "nicename" : "Norway",
    "phonecode" : 47
  }, {
    "iso" : "OM",
    "nicename" : "Oman",
    "phonecode" : 968
  }, {
    "iso" : "PK",
    "nicename" : "Pakistan",
    "phonecode" : 92
  }, {
    "iso" : "PW",
    "nicename" : "Palau",
    "phonecode" : 680
  }, {
    "iso" : "PS",
    "nicename" : "Palestinian Territory, Occupied",
    "phonecode" : 970
  }, {
    "iso" : "PA",
    "nicename" : "Panama",
    "phonecode" : 507
  }, {
    "iso" : "PG",
    "nicename" : "Papua New Guinea",
    "phonecode" : 675
  }, {
    "iso" : "PY",
    "nicename" : "Paraguay",
    "phonecode" : 595
  }, {
    "iso" : "PE",
    "nicename" : "Peru",
    "phonecode" : 51
  }, {
    "iso" : "PH",
    "nicename" : "Philippines",
    "phonecode" : 63
  }, {
    "iso" : "PN",
    "nicename" : "Pitcairn",
    "phonecode" : 0
  }, {
    "iso" : "PL",
    "nicename" : "Poland",
    "phonecode" : 48
  }, {
    "iso" : "PT",
    "nicename" : "Portugal",
    "phonecode" : 351
  }, {
    "iso" : "PR",
    "nicename" : "Puerto Rico",
    "phonecode" : 1787
  }, {
    "iso" : "QA",
    "nicename" : "Qatar",
    "phonecode" : 974
  }, {
    "iso" : "RE",
    "nicename" : "Reunion",
    "phonecode" : 262
  }, {
    "iso" : "RO",
    "nicename" : "Romania",
    "phonecode" : 40
  }, {
    "iso" : "RU",
    "nicename" : "Russian Federation",
    "phonecode" : 70
  }, {
    "iso" : "RW",
    "nicename" : "Rwanda",
    "phonecode" : 250
  }, {
    "iso" : "SH",
    "nicename" : "Saint Helena",
    "phonecode" : 290
  }, {
    "iso" : "KN",
    "nicename" : "Saint Kitts and Nevis",
    "phonecode" : 1869
  }, {
    "iso" : "LC",
    "nicename" : "Saint Lucia",
    "phonecode" : 1758
  }, {
    "iso" : "PM",
    "nicename" : "Saint Pierre and Miquelon",
    "phonecode" : 508
  }, {
    "iso" : "VC",
    "nicename" : "Saint Vincent and the Grenadines",
    "phonecode" : 1784
  }, {
    "iso" : "WS",
    "nicename" : "Samoa",
    "phonecode" : 684
  }, {
    "iso" : "SM",
    "nicename" : "San Marino",
    "phonecode" : 378
  }, {
    "iso" : "ST",
    "nicename" : "Sao Tome and Principe",
    "phonecode" : 239
  }, {
    "iso" : "SA",
    "nicename" : "Saudi Arabia",
    "phonecode" : 966
  }, {
    "iso" : "SN",
    "nicename" : "Senegal",
    "phonecode" : 221
  }, {
    "iso" : "CS",
    "nicename" : "Serbia and Montenegro",
    "phonecode" : 381
  }, {
    "iso" : "SC",
    "nicename" : "Seychelles",
    "phonecode" : 248
  }, {
    "iso" : "SL",
    "nicename" : "Sierra Leone",
    "phonecode" : 232
  }, {
    "iso" : "SG",
    "nicename" : "Singapore",
    "phonecode" : 65
  }, {
    "iso" : "SK",
    "nicename" : "Slovakia",
    "phonecode" : 421
  }, {
    "iso" : "SI",
    "nicename" : "Slovenia",
    "phonecode" : 386
  }, {
    "iso" : "SB",
    "nicename" : "Solomon Islands",
    "phonecode" : 677
  }, {
    "iso" : "SO",
    "nicename" : "Somalia",
    "phonecode" : 252
  }, {
    "iso" : "ZA",
    "nicename" : "South Africa",
    "phonecode" : 27
  }, {
    "iso" : "GS",
    "nicename" : "South Georgia and the South Sandwich Islands",
    "phonecode" : 0
  }, {
    "iso" : "ES",
    "nicename" : "Spain",
    "phonecode" : 34
  }, {
    "iso" : "LK",
    "nicename" : "Sri Lanka",
    "phonecode" : 94
  }, {
    "iso" : "SD",
    "nicename" : "Sudan",
    "phonecode" : 249
  }, {
    "iso" : "SR",
    "nicename" : "Suriname",
    "phonecode" : 597
  }, {
    "iso" : "SJ",
    "nicename" : "Svalbard and Jan Mayen",
    "phonecode" : 47
  }, {
    "iso" : "SZ",
    "nicename" : "Swaziland",
    "phonecode" : 268
  }, {
    "iso" : "SE",
    "nicename" : "Sweden",
    "phonecode" : 46
  }, {
    "iso" : "CH",
    "nicename" : "Switzerland",
    "phonecode" : 41
  }, {
    "iso" : "SY",
    "nicename" : "Syrian Arab Republic",
    "phonecode" : 963
  }, {
    "iso" : "TW",
    "nicename" : "Taiwan, Province of China",
    "phonecode" : 886
  }, {
    "iso" : "TJ",
    "nicename" : "Tajikistan",
    "phonecode" : 992
  }, {
    "iso" : "TZ",
    "nicename" : "Tanzania, United Republic of",
    "phonecode" : 255
  }, {
    "iso" : "TH",
    "nicename" : "Thailand",
    "phonecode" : 66
  }, {
    "iso" : "TL",
    "nicename" : "Timor-Leste",
    "phonecode" : 670
  }, {
    "iso" : "TG",
    "nicename" : "Togo",
    "phonecode" : 228
  }, {
    "iso" : "TK",
    "nicename" : "Tokelau",
    "phonecode" : 690
  }, {
    "iso" : "TO",
    "nicename" : "Tonga",
    "phonecode" : 676
  }, {
    "iso" : "TT",
    "nicename" : "Trinidad and Tobago",
    "phonecode" : 1868
  }, {
    "iso" : "TN",
    "nicename" : "Tunisia",
    "phonecode" : 216
  }, {
    "iso" : "TR",
    "nicename" : "Turkey",
    "phonecode" : 90
  }, {
    "iso" : "TM",
    "nicename" : "Turkmenistan",
    "phonecode" : 7370
  }, {
    "iso" : "TC",
    "nicename" : "Turks and Caicos Islands",
    "phonecode" : 1649
  }, {
    "iso" : "TV",
    "nicename" : "Tuvalu",
    "phonecode" : 688
  }, {
    "iso" : "UG",
    "nicename" : "Uganda",
    "phonecode" : 256
  }, {
    "iso" : "UA",
    "nicename" : "Ukraine",
    "phonecode" : 380
  }, {
    "iso" : "AE",
    "nicename" : "United Arab Emirates",
    "phonecode" : 971
  }, {
    "iso" : "GB",
    "nicename" : "United Kingdom",
    "phonecode" : 44
  }, {
    "iso" : "US",
    "nicename" : "United States",
    "phonecode" : 1
  }, {
    "iso" : "UM",
    "nicename" : "United States Minor Outlying Islands",
    "phonecode" : 1
  }, {
    "iso" : "UY",
    "nicename" : "Uruguay",
    "phonecode" : 598
  }, {
    "iso" : "UZ",
    "nicename" : "Uzbekistan",
    "phonecode" : 998
  }, {
    "iso" : "VU",
    "nicename" : "Vanuatu",
    "phonecode" : 678
  }, {
    "iso" : "VE",
    "nicename" : "Venezuela",
    "phonecode" : 58
  }, {
    "iso" : "VN",
    "nicename" : "Viet Nam",
    "phonecode" : 84
  }, {
    "iso" : "VG",
    "nicename" : "Virgin Islands, British",
    "phonecode" : 1284
  }, {
    "iso" : "VI",
    "nicename" : "Virgin Islands, U.s.",
    "phonecode" : 1340
  }, {
    "iso" : "WF",
    "nicename" : "Wallis and Futuna",
    "phonecode" : 681
  }, {
    "iso" : "EH",
    "nicename" : "Western Sahara",
    "phonecode" : 212
  }, {
    "iso" : "YE",
    "nicename" : "Yemen",
    "phonecode" : 967
  }, {
    "iso" : "ZM",
    "nicename" : "Zambia",
    "phonecode" : 260
  }, {
    "iso" : "ZW",
    "nicename" : "Zimbabwe",
    "phonecode" : 263
  }, {
    "iso" : "RS",
    "nicename" : "Serbia",
    "phonecode" : 381
  }, {
    "iso" : "AP",
    "nicename" : "Asia / Pacific Region",
    "phonecode" : 0
  }, {
    "iso" : "ME",
    "nicename" : "Montenegro",
    "phonecode" : 382
  }, {
    "iso" : "AX",
    "nicename" : "Aland Islands",
    "phonecode" : 358
  }, {
    "iso" : "BQ",
    "nicename" : "Bonaire, Sint Eustatius and Saba",
    "phonecode" : 599
  }, {
    "iso" : "CW",
    "nicename" : "Curacao",
    "phonecode" : 599
  }, {
    "iso" : "GG",
    "nicename" : "Guernsey",
    "phonecode" : 44
  }, {
    "iso" : "IM",
    "nicename" : "Isle of Man",
    "phonecode" : 44
  }, {
    "iso" : "JE",
    "nicename" : "Jersey",
    "phonecode" : 44
  }, {
    "iso" : "XK",
    "nicename" : "Kosovo",
    "phonecode" : 381
  }, {
    "iso" : "BL",
    "nicename" : "Saint Barthelemy",
    "phonecode" : 590
  }, {
    "iso" : "MF",
    "nicename" : "Saint Martin",
    "phonecode" : 590
  }, {
    "iso" : "SX",
    "nicename" : "Sint Maarten",
    "phonecode" : 1
  }, {
    "iso" : "SS",
    "nicename" : "South Sudan",
    "phonecode" : 211
  } ]
}}]

     - returns: RequestBuilder<CountryPhoneCodeListResponse> 
     */
    open class func phoneCodeListGetWithRequestBuilder() -> RequestBuilder<CountryPhoneCodeListResponse> {
        let path = "/phone_code_list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CountryPhoneCodeListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     User ReSend Otp
     
     - parameter iUserId: (form) User Id 
     - parameter vPhoneNo: (form) Phone 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resendOtpPost(iUserId: Int, vPhoneNo: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        resendOtpPostWithRequestBuilder(iUserId: iUserId, vPhoneNo: vPhoneNo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     User ReSend Otp
     - POST /resend_otp
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "237830 is your verification code."
}}]
     
     - parameter iUserId: (form) User Id 
     - parameter vPhoneNo: (form) Phone 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func resendOtpPostWithRequestBuilder(iUserId: Int, vPhoneNo: String) -> RequestBuilder<SuccessResponse> {
        let path = "/resend_otp"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iUserId": iUserId.encodeToJSON(),
            "vPhoneNo": vPhoneNo
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     User Send Otp
     
     - parameter iUserId: (form) User Id 
     - parameter vPhoneNo: (form) Phone 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendOtpPost(iUserId: Int, vPhoneNo: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        sendOtpPostWithRequestBuilder(iUserId: iUserId, vPhoneNo: vPhoneNo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     User Send Otp
     - POST /send_otp
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "237830 is your air-charter-booking account verification code."
}}]
     
     - parameter iUserId: (form) User Id 
     - parameter vPhoneNo: (form) Phone 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func sendOtpPostWithRequestBuilder(iUserId: Int, vPhoneNo: String) -> RequestBuilder<SuccessResponse> {
        let path = "/send_otp"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iUserId": iUserId.encodeToJSON(),
            "vPhoneNo": vPhoneNo
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter tiUserType
     */
    public enum TiUserType_signupStep1Post: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     * enum for parameter tiDeviceType
     */
    public enum TiDeviceType_signupStep1Post: String { 
        case _0 = "0"
        case _1 = "1"
    }

    /**
     User signup step1
     
     - parameter vUserName: (form) Full Name 
     - parameter vPhone: (form) Phone 
     - parameter vEmail: (form) Email address 
     - parameter password: (form) Password 
     - parameter passwordConfirmation: (form) Confimed Password 
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 
     - parameter tiIsPushEnabled: (form) Push Enabled (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signupStep1Post(vUserName: String, vPhone: String, vEmail: String, password: String, passwordConfirmation: String, tiUserType: TiUserType_signupStep1Post, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_signupStep1Post, tiIsPushEnabled: String? = nil, completion: @escaping ((_ data: SignupStep1Response?,_ error: Error?) -> Void)) {
        signupStep1PostWithRequestBuilder(vUserName: vUserName, vPhone: vPhone, vEmail: vEmail, password: password, passwordConfirmation: passwordConfirmation, tiUserType: tiUserType, vDeviceToken: vDeviceToken, vDeviceName: vDeviceName, vDeviceUniqueId: vDeviceUniqueId, vUserDeviceLanguage: vUserDeviceLanguage, dcLatitude: dcLatitude, dcLongitude: dcLongitude, tiDeviceType: tiDeviceType, tiIsPushEnabled: tiIsPushEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     User signup step1
     - POST /signup_step1
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "User information",
  "data" : {
    "iUserId" : 37,
    "vUserName" : "aaa",
    "vEmail" : "aa11@aaa.com",
    "vPhone" : "1111111",
    "vProfileImage" : "profile-image.jpeg",
    "tiUserType" : 0,
    "tisOTPVerify" : 1,
    "tiIsSocialLogin" : 0,
    "tiIsGuestUser" : 0,
    "tiIsActive" : 1,
    "accessToken" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjEyMjg5YjE2MGY4NmFjYTkwZjVmZDVlYjE3NTQ4M2Y4MmU4ZTUzYmIxZjI5NzBiZDI0OTkyMGJjYjQwYTA5MGFkZWMxOGM3YzVhNjE5NTY0In0.eyJhdWQiOiIxIiwianRpIjoiMTIyODliMTYwZjg2YWNhOTBmNWZkNWViMTc1NDgzZjgyZThlNTNiYjFmMjk3MGJkMjQ5OTIwYmNiNDBhMDkwYWRlYzE4YzdjNWE2MTk1NjQiLCJpYXQiOjE1ODIwMTQxMDQsIm5iZiI6MTU4MjAxNDEwNCwiZXhwIjoxNjEzNjM2NTAzLCJzdWIiOiIzNyIsInNjb3BlcyI6W119.mquTwMx1OzHk_u3vgiuvlKvf895hYhNA5FYpuzWB1f1-7BZkI0czaBO2nCriX7jyj1xhRQnW7XF5Vhh7cIXvHQGoDZCZY9MMFDFMcx7nr0gfr_qrmBeprnJeM_wVd39_ruqZ1eA9tAYaL3k4fE4puqb_JMy7r2feZDlQEqv3eBDj333Wq7dns364i8K4WEc5XVrs-GYDOOEExlYUCo1_LplXJ-3tzu5A-2CLSS_LQdHnDEboha1dbWvNYSW4pLSAuyF4oAMwiWIRA0QHyN2Ml1a6lX7lzE6plGRYTBhNg9n2apvk0OamDOTXLF5jtu4LncuandgTkNyydAYoyLsVgBUWsHz8CAR4rlIYRljZ4Ek4oe4BmUlsjNxNJa1AhW_enZowPUmgi1_rSli8ncZoxshjwP27NsygKf5cj8-2rSD2jFXy3AF1u2fb5H8GkjsePj-nant-c1e1W2cI5BD_BYQMJPeFfCv1L4hUuQUkuLypPxEjnAbuLGDEcZioVXjZ2RSNZUfQZ0bzbf2VRd-PsoDPIr6snqRfZpF5or2ue4ymaLUklfhWBCNGMa9uNPjlD7JChuI4EsHUMQXMkNN_LbBRdOJBvkGcg4F4b0QOVPkez3BbO_YNuTkkI3mgc0i8sPC4cNunMjYZuMPGk0spEDYUbXZV8Cz7xdpzBqvaQ1Q"
  }
}}]
     
     - parameter vUserName: (form) Full Name 
     - parameter vPhone: (form) Phone 
     - parameter vEmail: (form) Email address 
     - parameter password: (form) Password 
     - parameter passwordConfirmation: (form) Confimed Password 
     - parameter tiUserType: (form) User Type (0 – operator,  1 – customer) 
     - parameter vDeviceToken: (form) Device token 
     - parameter vDeviceName: (form) Device name 
     - parameter vDeviceUniqueId: (form) Device Unique Id 
     - parameter vUserDeviceLanguage: (form) Device Language 
     - parameter dcLatitude: (form) Device Latitude 
     - parameter dcLongitude: (form) Device Longitude 
     - parameter tiDeviceType: (form) Device Type (0-&gt; iOs 1 -&gt; android ) 
     - parameter tiIsPushEnabled: (form) Push Enabled (optional, default to 1)

     - returns: RequestBuilder<SignupStep1Response> 
     */
    open class func signupStep1PostWithRequestBuilder(vUserName: String, vPhone: String, vEmail: String, password: String, passwordConfirmation: String, tiUserType: TiUserType_signupStep1Post, vDeviceToken: String, vDeviceName: String, vDeviceUniqueId: String, vUserDeviceLanguage: String, dcLatitude: String, dcLongitude: String, tiDeviceType: TiDeviceType_signupStep1Post, tiIsPushEnabled: String? = nil) -> RequestBuilder<SignupStep1Response> {
        let path = "/signup_step1"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "vUserName": vUserName,
            "vPhone": vPhone,
            "vEmail": vEmail,
            "password": password,
            "password_confirmation": passwordConfirmation,
            "tiUserType": tiUserType.rawValue,
            "vDeviceToken": vDeviceToken,
            "vDeviceName": vDeviceName,
            "vDeviceUniqueId": vDeviceUniqueId,
            "vUserDeviceLanguage": vUserDeviceLanguage,
            "dcLatitude": dcLatitude,
            "dcLongitude": dcLongitude,
            "tiDeviceType": tiDeviceType.rawValue,
            "tiIsPushEnabled": tiIsPushEnabled
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SignupStep1Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     User signup step2
     
     - parameter iUserId: (form) User Id 
     - parameter vIdProof: (form) Upload Id Proof 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signupStep2Post(iUserId: Int, vIdProof: String, completion: @escaping ((_ data: SignupStep2Response?,_ error: Error?) -> Void)) {
        signupStep2PostWithRequestBuilder(iUserId: iUserId, vIdProof: vIdProof).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     User signup step2
     - POST /signup_step2
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "User information",
  "data" : {
    "iUserId" : 37,
    "vUserName" : "aaa",
    "vEmail" : "aa11@aaa.com",
    "vPhone" : "1111111",
    "vProfileImage" : "profile-image.jpeg",
    "tiUserType" : 0,
    "tisOTPVerify" : 1,
    "tiIsSocialLogin" : 0,
    "tiIsGuestUser" : 0,
    "tiIsActive" : 1,
    "accessToken" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjEyMjg5YjE2MGY4NmFjYTkwZjVmZDVlYjE3NTQ4M2Y4MmU4ZTUzYmIxZjI5NzBiZDI0OTkyMGJjYjQwYTA5MGFkZWMxOGM3YzVhNjE5NTY0In0.eyJhdWQiOiIxIiwianRpIjoiMTIyODliMTYwZjg2YWNhOTBmNWZkNWViMTc1NDgzZjgyZThlNTNiYjFmMjk3MGJkMjQ5OTIwYmNiNDBhMDkwYWRlYzE4YzdjNWE2MTk1NjQiLCJpYXQiOjE1ODIwMTQxMDQsIm5iZiI6MTU4MjAxNDEwNCwiZXhwIjoxNjEzNjM2NTAzLCJzdWIiOiIzNyIsInNjb3BlcyI6W119.mquTwMx1OzHk_u3vgiuvlKvf895hYhNA5FYpuzWB1f1-7BZkI0czaBO2nCriX7jyj1xhRQnW7XF5Vhh7cIXvHQGoDZCZY9MMFDFMcx7nr0gfr_qrmBeprnJeM_wVd39_ruqZ1eA9tAYaL3k4fE4puqb_JMy7r2feZDlQEqv3eBDj333Wq7dns364i8K4WEc5XVrs-GYDOOEExlYUCo1_LplXJ-3tzu5A-2CLSS_LQdHnDEboha1dbWvNYSW4pLSAuyF4oAMwiWIRA0QHyN2Ml1a6lX7lzE6plGRYTBhNg9n2apvk0OamDOTXLF5jtu4LncuandgTkNyydAYoyLsVgBUWsHz8CAR4rlIYRljZ4Ek4oe4BmUlsjNxNJa1AhW_enZowPUmgi1_rSli8ncZoxshjwP27NsygKf5cj8-2rSD2jFXy3AF1u2fb5H8GkjsePj-nant-c1e1W2cI5BD_BYQMJPeFfCv1L4hUuQUkuLypPxEjnAbuLGDEcZioVXjZ2RSNZUfQZ0bzbf2VRd-PsoDPIr6snqRfZpF5or2ue4ymaLUklfhWBCNGMa9uNPjlD7JChuI4EsHUMQXMkNN_LbBRdOJBvkGcg4F4b0QOVPkez3BbO_YNuTkkI3mgc0i8sPC4cNunMjYZuMPGk0spEDYUbXZV8Cz7xdpzBqvaQ1Q"
  }
}}]
     
     - parameter iUserId: (form) User Id 
     - parameter vIdProof: (form) Upload Id Proof 

     - returns: RequestBuilder<SignupStep2Response> 
     */
    open class func signupStep2PostWithRequestBuilder(iUserId: Int, vIdProof: String) -> RequestBuilder<SignupStep2Response> {
        let path = "/signup_step2"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iUserId": iUserId.encodeToJSON(),
            "vIdProof": vIdProof
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SignupStep2Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update phone number
     
     - parameter iUserId: (form) User Id 
     - parameter vPhoneNo: (form) Phone 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePhoneNumberPost(iUserId: Int, vPhoneNo: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        updatePhoneNumberPostWithRequestBuilder(iUserId: iUserId, vPhoneNo: vPhoneNo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update phone number
     - POST /update_phone_number
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "237830 is your air-charter-booking account verification code."
}}]
     
     - parameter iUserId: (form) User Id 
     - parameter vPhoneNo: (form) Phone 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func updatePhoneNumberPostWithRequestBuilder(iUserId: Int, vPhoneNo: String) -> RequestBuilder<SuccessResponse> {
        let path = "/update_phone_number"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iUserId": iUserId.encodeToJSON(),
            "vPhoneNo": vPhoneNo
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     User Verify Otp
     
     - parameter iUserId: (form) User Id 
     - parameter iOtp: (form) Otp 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifyOtpPost(iUserId: Int, iOtp: Int, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        verifyOtpPostWithRequestBuilder(iUserId: iUserId, iOtp: iOtp).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     User Verify Otp
     - POST /verify_otp
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "OTP has been sent successfully"
}}]
     
     - parameter iUserId: (form) User Id 
     - parameter iOtp: (form) Otp 

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func verifyOtpPostWithRequestBuilder(iUserId: Int, iOtp: Int) -> RequestBuilder<SuccessResponse> {
        let path = "/verify_otp"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "iUserId": iUserId.encodeToJSON(),
            "iOtp": iOtp.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
