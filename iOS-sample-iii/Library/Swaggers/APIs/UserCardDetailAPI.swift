//
// UserCardDetailAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserCardDetailAPI {
    /**
     get User card List
     
     - parameter accessToken: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCardGet(accessToken: String, completion: @escaping ((_ data: UserCardListResponse?,_ error: Error?) -> Void)) {
        userCardGetWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     get User card List
     - GET /user-card
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Card information",
  "data" : [ {
    "iUserCardId" : 1,
    "iUserId" : 2,
    "vCardToken" : "card_1D4T1HGH5n1V8hmtpnVjI6Es",
    "vCardBrand" : "Visa",
    "vCardNo" : "4242",
    "iExpiryMonth" : 12,
    "iExpiryYear" : 2023
  } ]
}}]
     
     - parameter accessToken: (header)  

     - returns: RequestBuilder<UserCardListResponse> 
     */
    open class func userCardGetWithRequestBuilder(accessToken: String) -> RequestBuilder<UserCardListResponse> {
        let path = "/user-card"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "AccessToken": accessToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UserCardListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Delete User card
     
     - parameter iUserCardDetailId: (path) iUserCardDetailId 
     - parameter accessToken: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCardIUserCardDetailIdDelete(iUserCardDetailId: Int, accessToken: String, completion: @escaping ((_ data: SuccessResponse?,_ error: Error?) -> Void)) {
        userCardIUserCardDetailIdDeleteWithRequestBuilder(iUserCardDetailId: iUserCardDetailId, accessToken: accessToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete User card
     - DELETE /user-card/{iUserCardDetailId}
     - examples: [{contentType=application/json, example={
  "code" : 200,
  "message" : "Card Information is successfully deleted."
}}]
     
     - parameter iUserCardDetailId: (path) iUserCardDetailId 
     - parameter accessToken: (header)  

     - returns: RequestBuilder<SuccessResponse> 
     */
    open class func userCardIUserCardDetailIdDeleteWithRequestBuilder(iUserCardDetailId: Int, accessToken: String) -> RequestBuilder<SuccessResponse> {
        var path = "/user-card/{iUserCardDetailId}"
        let iUserCardDetailIdPreEscape = "\(iUserCardDetailId)"
        let iUserCardDetailIdPostEscape = iUserCardDetailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{iUserCardDetailId}", with: iUserCardDetailIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "AccessToken": accessToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SuccessResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Add User card
     
     - parameter customerId: (form) customerId 
     - parameter vCardToken: (form) Card Token 
     - parameter accessToken: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCardPost(customerId: String, vCardToken: String, accessToken: String, completion: @escaping ((_ data: AddUserCardResponse?,_ error: Error?) -> Void)) {
        userCardPostWithRequestBuilder(customerId: customerId, vCardToken: vCardToken, accessToken: accessToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add User card
     - POST /user-card
     - examples: [{contentType=application/json, example={
  "message" : "User Card information",
  "data" : {
    "iUserCardId" : 1,
    "iUserId" : 2,
    "vCardToken" : "card_1D4T1HGH5n1V8hmtpnVjI6Es",
    "vCardBrand" : "Visa",
    "vCardNo" : "4242",
    "iExpiryMonth" : 12,
    "iExpiryYear" : 2023
  }
}}]
     
     - parameter customerId: (form) customerId 
     - parameter vCardToken: (form) Card Token 
     - parameter accessToken: (header)  

     - returns: RequestBuilder<AddUserCardResponse> 
     */
    open class func userCardPostWithRequestBuilder(customerId: String, vCardToken: String, accessToken: String) -> RequestBuilder<AddUserCardResponse> {
        let path = "/user-card"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "customerId": customerId,
            "vCardToken": vCardToken
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "AccessToken": accessToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AddUserCardResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
