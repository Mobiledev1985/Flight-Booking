//
//  FlightListViewController.swift
//  AircraftApp
//
//  Created by SOTSYS148 on 26/02/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FlightListProtocol: class {
    func getSearchAircraftResoponse(response: SearchAircraftResponse)
    func displayAlert(strTitle : String, strMessage : String)
}

class FlightListViewController: UIViewController, FlightListProtocol {
    
    //----------------------------
    // MARK:- Outlets Declaration-
    //----------------------------
    @IBOutlet weak var tblFlightList: UITableView!
    //------------------------------
    // MARK:- Variables Declaration-
    //------------------------------
    
    var bookingType: enBookingType!
    var searchAircraftParam: Dictionary<String,Any>?
    var searchAircraftResponse: SearchAircraftResponse?
    var arrAircraftList: [SearchAircraftResponseDataDepartAircrafts]?
    //var interactor : FlightListInteractorProtocol?
    var presenter : FlightListPresentationProtocol?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = FlightListInteractor()
        let presenter = FlightListPresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        //viewController.interactor = interactor
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        setUpNavigationBar()
        prePareUI()
    }
       
    override func viewWillDisappear(_ animated: Bool) {
           super.viewWillDisappear(true)
           navigationController?.setNavigationBarHidden(true, animated: false)
    }
    //----------------
    // MARK:- Actions-
    //----------------
    
    @IBAction func btnBackAction(_ sender: UIButton) {
        self.popVC()
    }
    
    @IBAction func btnMyProfile(_ sender: UIButton) {
        
    }

    //-----------------------
    // MARK:- Custom Methods-
    //-----------------------
    func setUpNavigationBar(){
        self.isNavBarHidden = false
        self.navigationController?.navigationBar.prefersLargeTitles = false
        self.navigationController?.navigationBar.setBackgroundImage(UIImage(), for: UIBarMetrics.default)
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.setLeftBarButtonTitle(imageName: #imageLiteral(resourceName: "icn_back_white"), selector: #selector(btnBackAction(_:)  ))
        self.setRightBarBtn(imageName: #imageLiteral(resourceName: "icn_user"), selector: #selector(btnMyProfile(_:)))
    }
    
    func prePareUI() {
        if NetworkReachabilityManager.init()!.isReachable {
            let params = RequestParameter.init().searchAircraftParam(iTripType: (BookingModel.bookingSharedDM?.iTripType?.string)!, iDepartureId: (BookingModel.bookingSharedDM?.departureAirport?.iAirportId)!, iDestinationId: (BookingModel.bookingSharedDM?.destinationAirport?.iAirportId)!, iDepartureDate: BookingModel.bookingSharedDM!.iDepartureDate!, iDepartureTime: BookingModel.bookingSharedDM!.iDepartureTime!, iReturnDate: 0, iReturnTime: 0, iAircraftTypeId: (BookingModel.bookingSharedDM?.selectedAircaft!.iAircraftTypeId)!, iTripBookingType: BookingModel.bookingSharedDM!.iTripBookingType!, vDeviceUniqueId: DEVICEID)
            self.presenter?.callSearchAircraftRequest(params: params, inView: self.view)
        } else {
            self.showAlert(title: APPNAME, message: NETWORKALERT)
        }
    }
    
    func getSearchAircraftResoponse(response: SearchAircraftResponse) {
        self.searchAircraftResponse = response
        self.arrAircraftList = response.data?.departAircrafts
        self.tblFlightList.delegate = self
        self.tblFlightList.dataSource = self
        self.tblFlightList.reloadData()
    }
    
    func displayAlert(strTitle : String, strMessage : String) {
        //nameTextField.text = viewModel.name
        self.showAlert(title: strTitle, message: strMessage)
    }
}

//------------------------------------------------
// MARK:- TableView DataSource & Delegate Methods-
//------------------------------------------------
extension FlightListViewController : UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return arrAircraftList?.count ?? 5
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "FlightListTableViewCell") as! FlightListTableViewCell
        applyShadow(view: cell.shadowbackGroundView, shadowColor: blackShadowColor!, radius: 13.0)
        if bookingType == enBookingType.privateBooking {
            cell.tripTypeView.isHidden = false
            cell.viewForSharedBooking.isHidden = true
            cell.constraintHeight.constant = 138
        } else {
            cell.tripTypeView.isHidden = true
            cell.viewForSharedBooking.isHidden = false
            cell.constraintHeight.constant = 202
        }
        let record:SearchAircraftResponseDataDepartAircrafts = arrAircraftList![indexPath.row]
        cell.lblAircraftName.text = record.vAircraftName
        cell.lblComapanyName.text = record.vCompanyName
        cell.lblAvailableSeats.text = String(record.iNumberOfSeats!)
        cell.lblPrice.text = String(describing: record.dcPricePerSeat!)
//        cell.lblSpeed.text = String(record.iCruiseSpeed!) + String(describing: record.vCruiseSpeedUnit!)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let objVc = PrivateFlightBookingDetailViewController.instantiateFromStoryboard(.BookFlight)
        if bookingType == enBookingType.sharedBooking {
            objVc.bookingType = .sharedBooking
        } else {
            
            objVc.bookingType = .privateBooking
        }
        self.navigationController?.pushViewController(objVc, animated: true)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if bookingType == enBookingType.privateBooking {
            return 158
        } else {
            return 222
        }
    }
}
