//
//  SelectLocationViewController.swift
//  AircraftApp
//
//  Created by SOTSYS148 on 20/02/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol SelectLocationProtocol: class {
    func getAirportListResponse(response: AirportListResponse)
    func displayAlert(strTitle : String, strMessage : String)
}

class SelectLocationViewController: UIViewController, SelectLocationProtocol, UITextFieldDelegate {
    
    
    //----------------------------
    // MARK:- Outlets Declaration-
    //----------------------------
    
    @IBOutlet weak var saveBtnBackgroundView: UIView!
    @IBOutlet weak var txtSelectAirPort: DropDown!
    @IBOutlet weak var txtZipCode: SkyFloatingLabelTextField!
    @IBOutlet weak var txtCity: SkyFloatingLabelTextField!
    //------------------------------
    // MARK:- Variables Declaration-
    //------------------------------
    
    var airportListResponse: AirportListResponse?
    var arrAirportList: [AirportListResponseData]?
    var arrAirportName = [String]()
    var strNavtitle: String = ""
    var selectedAirport: AirportListResponseData?
    
    var completion: ((_ selectedAirport: AirportListResponseData?) -> Void)?
    
    //var interactor : SelectLocationInteractorProtocol?
    var presenter : SelectLocationPresentationProtocol?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SelectLocationInteractor()
        let presenter = SelectLocationPresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        //viewController.interactor = interactor
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        setUpNavigationBar()
        prePareUI()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(true)
        navigationController?.setNavigationBarHidden(true, animated: false)
    }
    
    //----------------
    // MARK:- Actions-
    //----------------
    
    @IBAction func btnBackAction(_ sender: UIButton) {
        self.popVC()
    }
    
    @IBAction func dropDownACtion(_ sender: DropDown) {
        print("dropDown Selected!!!!!")
        txtSelectAirPort.showList()
    }
    
    @IBAction func btnSaveAction (_ sender: UIButton) {
        self.popVC()
        completion!(selectedAirport)
    }
    
    //-----------------------
    // MARK:- Custom Methods-
    //-----------------------
    
    func applyShadow(view: UIView,shadowColor : CGColor) {
        view.layer.cornerRadius = view.height * 0.5
        view.clipsToBounds = true
        view.layer.masksToBounds = false
        view.layer.shadowRadius = 3.5
        view.layer.shadowOpacity = 1
        view.layer.shadowColor = shadowColor
        view.layer.shadowOffset = CGSize(width: 5 , height:5)
    }
    
    func setUpNavigationBar(){
        self.displayNavigationBar()
        self.title = strNavtitle
        self.setLeftBarButtonTitle(imageName: #imageLiteral(resourceName: "icn_back_arrow"), selector: #selector(btnBackAction(_:)  ))
    }
    
    func prePareUI(){
        self.txtZipCode.becomeFirstResponder()
        
        applyShadow(view: saveBtnBackgroundView, shadowColor: blueShadowColor!, radius: saveBtnBackgroundView.height * 0.5, offset:CGSize(width: 5 , height:5))
    }
    
    func getAirportListResponse(response: AirportListResponse) {
        self.airportListResponse = response
        self.arrAirportList = response.data
        for i in 0..<arrAirportList!.count {
            self.arrAirportName.append(arrAirportList![i].vAirportName!)
        }
        txtSelectAirPort.optionArray = arrAirportName
//        txtSelectAirPort.optionIds = [0,1,2,3,4]
        txtSelectAirPort.didSelect { (txt, int, int1) in
            print(txt,int,int1)
            self.selectedAirport = self.arrAirportList![int]
        }
    }
    
    func displayAlert(strTitle : String, strMessage : String) {
        //nameTextField.text = viewModel.name
        self.showAlert(title: strTitle, message: strMessage)
    }
    
    
    //-----------------------------------
    // MARK:- TextField Delegate Methods-
    //-----------------------------------
    func textFieldDidEndEditing(_ textField: UITextField) {
        if textField.tag == 1 {
            if NetworkReachabilityManager.init()!.isReachable {
                let param = RequestParameter.init().selectAirportsParam(vZipcode: self.txtZipCode.text!, vCity: self.txtCity.text!)
                self.presenter?.callAirportListRequest(param: param, inView: self.view)
            } else {
                self.showAlert(title: APPNAME, message: NETWORKALERT)
            }
        }
    }
    
}
