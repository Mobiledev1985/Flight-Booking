//
//  PrivateFlightBookingDetailInteractor.swift
//  AircraftApp
//
//  Created by SOTSYS148 on 26/02/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PrivateFlightBookingDetailInteractorProtocol {
    func callAircrafrDetailApi(param: Dictionary<String,Any>,inView: UIView)
    func callBookingContinueApi(param:Dictionary<String,Any>,inView:UIView)
}

protocol PrivateFlightBookingDetailDataStore {
    //var name: String { get set }
}

class PrivateFlightBookingDetailInteractor: PrivateFlightBookingDetailInteractorProtocol, PrivateFlightBookingDetailDataStore {
    var presenter: PrivateFlightBookingDetailPresentationProtocol?
    //var name: String = ""
    
    // MARK: Do something
    func callAircrafrDetailApi(param: Dictionary<String,Any>,inView: UIView) {
        AppSingleton.shared().showSpinner(onView: inView)
        BookingsAPI.aircraftDetailPost(iTripType: BookingsAPI.ITripType_aircraftDetailPost(rawValue: param["iTripType"] as! String)!, iTripBookingType: BookingsAPI.ITripBookingType_aircraftDetailPost(rawValue: param["iTripBookingType"] as! String)!, iDepartAircraftId: param["iDepartAircraftId"] as! Int, iDepartureId: param["iDepartureId"] as! Int, iDestinationId: param["iDestinationId"] as! Int, iDepartureDate: param["iDepartureDate"] as! Int, iDepartureTime: param["iDepartureTime"] as! Int) { (aircraftDetailResponse, error) in
            AppSingleton.shared().removeSpinner()
            if error == nil {
                self.presenter?.getAircraftDeatailResponse(response: aircraftDetailResponse!)
            } else {
                self.presenter?.getErrorResponse(error: error!)
            }
        }
    }
    
    func callBookingContinueApi(param:Dictionary<String,Any>,inView:UIView) {
        AppSingleton.shared().showSpinner(onView: inView)
        BookingsAPI.bookingContinuePost(iTripType: BookingsAPI.ITripType_bookingContinuePost(rawValue: param["iTripType"] as! String)!, iDepartAircraftId: param["iDepartAircraftId"] as! Int, iDepartureId: param["iDepartureId"] as! Int, iDestinationId: param["iDestinationId"] as! Int, iDepartureDate: param["iDepartureDate"] as! Int, iDepartureTime: param["iDepartureTime"] as! Int, iTripBookingType: BookingsAPI.ITripBookingType_bookingContinuePost(rawValue: param["iTripBookingType"] as! String)!, dcTotalPrice: param["dcTotalPrice"] as! Double, iNumberOfSeats: param["iNumberOfSeats"] as! Int, tiIsCatering: BookingsAPI.TiIsCatering_bookingContinuePost(rawValue: "0")!, tiIsCateringReservation: BookingsAPI.TiIsCateringReservation_bookingContinuePost(rawValue: "0")!, vDeviceUniqueId: DEVICEID) { (bookingContinueResponse, error) in
            AppSingleton.shared().removeSpinner()
            if error == nil {
                self.presenter?.getBookingContinueResponse(response: bookingContinueResponse!)
            } else {
                self.presenter?.getErrorResponse(error: error!)
            }
        }
    }
}
