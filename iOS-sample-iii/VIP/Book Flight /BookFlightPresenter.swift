//
//  BookFlightPresenter.swift
//  AircraftApp
//
//  Created by SOTSYS148 on 18/02/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BookFlightPresentationProtocol {
    func callAircraftTypelistRequest(inView:UIView)
    func getAircraftResponse(response: AircraftTypesListResponse)
    func getErrorResponse(error: Error)
}

class BookFlightPresenter: BookFlightPresentationProtocol {
    weak var viewController: BookFlightProtocol?
    var interactor: BookFlightInteractorProtocol?
    
    // MARK: Present something
    func callAircraftTypelistRequest(inView:UIView) {
        self.interactor?.callAircraftTypeListApi(inView:inView)  
    }
    
    func getAircraftResponse(response: AircraftTypesListResponse) {
        if response.code == APIConstant.ResponseCode.success {
            if response.data != nil {
                self.viewController?.getAircraftTypeResponse(response: response)
            } else{
                if let view = self.viewController as? UIViewController {
                    let baseDM = BaseModel.init(responseCode: response.code, responseMessage: (response.message)!)
                    view.showAlertView(baseDM)
                }
            }
        } else{
            if let view = self.viewController as? UIViewController {
                let baseDM = BaseModel.init(responseCode: response.code, responseMessage: (response.message)!)
                view.showAlertView(baseDM)
            }
        }
    }
    
    func getErrorResponse(error: Error) {
        
    }
}
